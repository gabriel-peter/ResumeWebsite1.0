{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_previewer/spotify_previewer.js\";\nimport React, { Component } from 'react';\nimport Spotify from 'spotify-web-api-js'; // https://medium.com/@jonnykalambay/now-playing-using-spotifys-awesome-api-with-react-7db8173a7b13?\n\nconst spotifyWebApi = new Spotify();\n\nclass Spotify_Previewer extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const baseLink = 'https://api.spotify.com/v1/me/top/artists?time_range=short_term&limit=50&offset=5\" -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer ';\n    this.state = {\n      access_token: '',\n      loggedIn: params.access_token ? true : false,\n      nowPlaying: {\n        name: 'Not Checked',\n        image: ''\n      }\n    };\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n      this.setState({\n        access_token: params.access_token\n      });\n    }\n  }\n\n  getNowPlaying() {\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      this.setState({\n        name: response.item.name,\n        image: response.item.album.images[0].url\n      });\n      console.log(this.state.name);\n    });\n  }\n\n  getTopArtists() {\n    fetch(this.baseLink + this.state.access_token).then(res => res.json()).then(artists => this.setState({\n      artists\n    }, () => console.log('Artists fetched...', artists)));\n  }\n\n  componentDidMount() {\n    if (this.state.loggedIn) {\n      this.getNowPlaying();\n    }\n\n    this.forceUpdate();\n    this.getTopArtists();\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"How Similar Are Our Music Tastes?\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"This is super important in order to ensure..\"), !this.state.loggedIn ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"http://localhost:5000/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"'Do Something with Spotify'\"))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.state.name), React.createElement(\"img\", {\n      src: this.state.image,\n      alt: \"Album Image\",\n      height: \"auto\",\n      width: \"auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Spotify_Previewer;","map":{"version":3,"sources":["/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_previewer/spotify_previewer.js"],"names":["React","Component","Spotify","spotifyWebApi","Spotify_Previewer","constructor","params","getHashParams","baseLink","state","access_token","loggedIn","nowPlaying","name","image","setAccessToken","setState","getNowPlaying","getMyCurrentPlaybackState","then","response","item","album","images","url","console","log","getTopArtists","fetch","res","json","artists","componentDidMount","forceUpdate","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Spotify from 'spotify-web-api-js';\n// https://medium.com/@jonnykalambay/now-playing-using-spotifys-awesome-api-with-react-7db8173a7b13?\n\nconst spotifyWebApi = new Spotify();\n\nclass Spotify_Previewer extends Component {\n    constructor(){\n        super();\n        const params = this.getHashParams()\n        const baseLink ='https://api.spotify.com/v1/me/top/artists?time_range=short_term&limit=50&offset=5\" -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer ';\n        this.state = {\n            access_token: '',\n            loggedIn: params.access_token ? true : false,\n            nowPlaying: {\n                name: 'Not Checked',\n                image: ''\n            },\n        }\n        if (params.access_token) {\n            spotifyWebApi.setAccessToken(params.access_token);\n            this.setState(({\n                    access_token: params.access_token\n            }));\n        }\n    }\n    getNowPlaying() {\n        spotifyWebApi.getMyCurrentPlaybackState ()\n        .then((response) => {\n            this.setState({\n                name: response.item.name,\n                image: response.item.album.images[0].url\n            })\n            console.log(this.state.name);\n        }) \n    }\n    getTopArtists() {\n        fetch(this.baseLink + this.state.access_token)\n        .then(res => res.json())\n        .then(artists => this.setState({artists},\n        () => console.log('Artists fetched...', artists)))\n    }\n    componentDidMount(){\n        if(this.state.loggedIn) {\n            this.getNowPlaying();\n        }\n        this.forceUpdate();\n        this.getTopArtists();\n    }\n\n    getHashParams() {\n        var hashParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n            q = window.location.hash.substring(1);\n        while ( e = r.exec(q)) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n        }\n        return hashParams;\n    }\n\n    render() {\n            return (\n                <div>\n                    <h1>How Similar Are Our Music Tastes?</h1>\n                    <h3>This is super important in order to ensure..</h3>\n                {!this.state.loggedIn ? (\n                <div>\n                    <a href='http://localhost:5000/login'>\n                        <button>'Do Something with Spotify'</button>\n                    </a>\n                </div>\n                ) : (\n                <div>\n                    <h3>{this.state.name}</h3>\n                    <img src={this.state.image} alt='Album Image' height='auto' width='auto'/>\n                </div>\n                )\n                } \n                </div>\n            );\n    }\n}\n\nexport default Spotify_Previewer;"]},"metadata":{},"sourceType":"module"}