{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_comparer/personal_spotify_data.js\";\nimport './graph_styling.css';\nimport React, { Component } from 'react';\nimport * as $ from \"jquery\";\nimport Chart_Constructor from './chart_constructor';\n\nclass Personal_Spotify_Data extends Component {\n  constructor() {\n    const access_token = 'BQD7brPt2c3ENXb-WkF0X1a0IlM7HeFUrIRiay7TPRAd-2ekyVjltCLNLJTiS_eU6RBYFhCxZWq7qRwVMPWWLwYu-fEbE1A9HQeqzzqwQUHbFGG_OU3iF2Gkrt8B6jLb-mYIxtCKlKjXLD5DlRnQyVDSvIZ9L83VMm30TuZcDeU';\n    super(); // https://developer.spotify.com/documentation/general/guides/authorization-guide/\n\n    this.state = {\n      access_token: access_token,\n      loggedIn: access_token ? true : false,\n      spotify_data: {\n        top_artists: [{\n          'x': 1,\n          'y': 1\n        }],\n        genre_weights: [{\n          'x': 1,\n          'y': 'Undef'\n        }],\n        top_5_artists_graph: [{\n          'x': 'Undef',\n          'y': 1\n        }],\n        top_5_artists_images: [{\n          'name': '',\n          'images': [{\n            'url': ''\n          }]\n        }],\n        top_artists_popularity: [{\n          'x': 1,\n          'y': 1\n        }],\n        popularity_list: [{\n          'x': 1,\n          'y': 1\n        }],\n        average_artist_rank: 0,\n        genre_quantity: [{\n          'x': 1,\n          'y': 1\n        }],\n        genre_intersection: [{\n          'x': 1,\n          'y': 1\n        }],\n        radialRankings: [{\n          'angle': 360\n        }]\n      }\n    };\n  }\n\n  refreshToken() {\n    console.log('HIT');\n    fetch('/refresh_token').then(res => res.json()).then(() => console.log('Customers fetched...'));\n  }\n\n  getTopArtists() {\n    $.ajax({\n      url: 'https://api.spotify.com/v1/me/top/artists?time_range=long_term&limit=50&offset=0',\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.state.access_token);\n      },\n      success: data => {\n        const spotify_data = this.props.analyseTermData(data);\n        this.setState({\n          spotify_data\n        });\n      },\n      error: (XMLHttpRequest, textStatus, errorThrown) => {\n        console.log(\"Status: \" + textStatus);\n        console.log(\"Error: \" + errorThrown);\n        this.refreshToken();\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.getTopArtists();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"I Like:\"), React.createElement(Chart_Constructor, {\n      average_artist_rank: this.state.spotify_data.average_artist_rank,\n      top_5_artists_images: this.state.spotify_data.top_5_artists_images,\n      data1: this.state.spotify_data.radialRankings,\n      data2: this.state.spotify_data.top_5_artists_graph,\n      genres: this.state.spotify_data.genre_weights,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Personal_Spotify_Data;","map":{"version":3,"sources":["/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_comparer/personal_spotify_data.js"],"names":["React","Component","$","Chart_Constructor","Personal_Spotify_Data","constructor","access_token","state","loggedIn","spotify_data","top_artists","genre_weights","top_5_artists_graph","top_5_artists_images","top_artists_popularity","popularity_list","average_artist_rank","genre_quantity","genre_intersection","radialRankings","refreshToken","console","log","fetch","then","res","json","getTopArtists","ajax","url","type","beforeSend","xhr","setRequestHeader","success","data","props","analyseTermData","setState","error","XMLHttpRequest","textStatus","errorThrown","componentDidMount","render"],"mappings":"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","sourcesContent":["import './graph_styling.css';\nimport React, { Component } from 'react';\nimport * as $ from \"jquery\";\nimport Chart_Constructor from './chart_constructor';\nclass Personal_Spotify_Data extends Component {\n    constructor() {\n        const access_token ='BQD7brPt2c3ENXb-WkF0X1a0IlM7HeFUrIRiay7TPRAd-2ekyVjltCLNLJTiS_eU6RBYFhCxZWq7qRwVMPWWLwYu-fEbE1A9HQeqzzqwQUHbFGG_OU3iF2Gkrt8B6jLb-mYIxtCKlKjXLD5DlRnQyVDSvIZ9L83VMm30TuZcDeU'\n        super();\n    // https://developer.spotify.com/documentation/general/guides/authorization-guide/\n    this.state = {\n        access_token: access_token,\n        loggedIn: access_token ? true : false,\n        spotify_data: {\n            top_artists: [{'x': 1, 'y': 1}],\n            genre_weights: [{'x': 1, 'y': 'Undef'}],\n            top_5_artists_graph: [{'x': 'Undef', 'y': 1}],\n            top_5_artists_images: [{'name': '', 'images': [{'url': ''}]}],\n            top_artists_popularity: [{'x': 1, 'y': 1}],\n            popularity_list: [{'x': 1, 'y': 1}], \n            average_artist_rank: 0, \n            genre_quantity: [{'x': 1, 'y': 1}], \n            genre_intersection: [{'x': 1, 'y': 1}],\n            radialRankings: [{'angle': 360}], \n        }\n    }\n}\nrefreshToken() {\n    console.log('HIT')\n    fetch('/refresh_token')\n        .then(res => res.json())\n        .then(\n            () => console.log('Customers fetched...'))\n}\ngetTopArtists() {\n    $.ajax({\n        url: 'https://api.spotify.com/v1/me/top/artists?time_range=long_term&limit=50&offset=0',\n        type: \"GET\",\n        beforeSend: (xhr) => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.state.access_token);\n        },\n        success: (data) => {\n            const spotify_data = this.props.analyseTermData(data);\n            this.setState({spotify_data});\n        },\n        error: (XMLHttpRequest, textStatus, errorThrown) => { \n            console.log(\"Status: \" + textStatus); \n            console.log(\"Error: \" + errorThrown); \n            this.refreshToken();\n        },\n    });\n}\ncomponentDidMount(){\n    this.getTopArtists();\n}\n    render() {\n        return (\n            <div>\n                <h2>I Like:</h2>\n                <Chart_Constructor\n                    average_artist_rank={this.state.spotify_data.average_artist_rank}\n                    top_5_artists_images={this.state.spotify_data.top_5_artists_images}\n                    data1={this.state.spotify_data.radialRankings} \n                    data2={this.state.spotify_data.top_5_artists_graph}\n                    genres={this.state.spotify_data.genre_weights}\n                />\n            </div>\n        ); \n    }\n}\n\nexport default Personal_Spotify_Data;"]},"metadata":{},"sourceType":"module"}