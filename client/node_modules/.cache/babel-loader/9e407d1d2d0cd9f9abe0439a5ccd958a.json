{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_comparer/spotify.js\";\nimport './graph_styling.css';\nimport * as $ from 'jquery';\nimport React, { Component } from 'react';\nimport Client_Spotify_Data from './client_spotify_data';\nimport Personal_Spotify_Data from './personal_spotify_data';\nimport Comparison from './comparison';\n\nclass Spotify extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    this.state = {\n      access_token: this.getHashParams().access_token,\n      loggedIn: params.access_token ? true : false,\n      currentSlide: 'Client',\n      userData: {\n        display_name: ''\n      }\n    };\n    this.getPersonalInformation();\n  }\n\n  getPersonalInformation() {\n    $.ajax({\n      url: 'https://api.spotify.com/v1/me',\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.state.access_token);\n      },\n      success: data => {\n        console.log(data);\n        this.setState({\n          userData: data\n        });\n      },\n      error: (XMLHttpRequest, textStatus, errorThrown) => {\n        console.log(\"Status: \" + textStatus);\n        console.log(\"Error: \" + errorThrown);\n      }\n    });\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  genreWeighting(genres) {\n    var categories = ['Pop', 'Rap', 'Country', 'Rock', 'Metal', 'Alternative', 'R&b', 'House'];\n    const weights = [];\n    categories.forEach(e => {\n      var count = 0;\n      genres.forEach(x => {\n        if (x.includes(e.toLowerCase())) {\n          count++;\n        }\n      });\n\n      if (count > 0) {\n        weights.push({\n          'y': e,\n          'x': count / genres.length * 100\n        }); // percent ration of total\n      }\n    });\n    return weights;\n  }\n\n  piChartRankings(ranks) {\n    let keys = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n    var values = [];\n    keys.forEach(e => {\n      var count = 0;\n      ranks.forEach(element => {\n        if (e === Math.trunc((element - 0.5) / 10) * 10) {\n          count++;\n        }\n      });\n      values.push(count);\n    }); // Radial Chart \n\n    var formattedResult = [];\n\n    for (var i = 0; i <= values.length - 1; i++) {\n      if (values[i] !== 0) {\n        formattedResult.push({\n          'angle': values[i],\n          'subLabel': values[i] + '%',\n          'label': 10 * i,\n          'radius': i / 2 + 5\n        });\n      }\n    }\n\n    return formattedResult;\n  }\n\n  analyseTermData(data) {\n    const test_array = [\"pop\", \"rap\", \"ssdsdsd\"];\n    const items = data.items;\n    const top_artists_names = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.name), []);\n    const top_artists_popularity = items.reduce((accumulator, currentValue) => accumulator.concat({\n      'artist': currentValue.name,\n      'rank': currentValue.popularity\n    }), []);\n    const popularity_list = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.popularity), []);\n    const average_artist_rank = items.reduce((accumulator, currentValue) => accumulator + currentValue.popularity, 0) / 50;\n    const genre_quantity = items.reduce((accumulator, currentValue) => accumulator.concat([currentValue.genres]), []).flat();\n    const genre_intersection = test_array.filter(element => genre_quantity.includes(element));\n    const radialRankings = this.piChartRankings(popularity_list);\n    const top_5_artists_graph = items.slice(0, 5).reduce((accumulator, currentValue) => accumulator.concat({\n      'x': currentValue.name,\n      'y': currentValue.popularity\n    }), []);\n    const top_5_artists_images = items.slice(0, 5);\n    const genre_weights = this.genreWeighting(genre_quantity);\n    const spotify_data = {\n      top_artists_names,\n      top_5_artists_graph,\n      top_5_artists_images,\n      genre_weights,\n      top_artists_popularity,\n      popularity_list,\n      average_artist_rank,\n      genre_quantity,\n      genre_intersection,\n      radialRankings\n    };\n    return spotify_data;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"How Similar Are Our Music Tastes?\"), !this.state.loggedIn ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Find out if we match!\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Click the button in order to fetch your long-term listening data for analyis!\"), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"(This service is follows Spotify's Auth-Flow Guidelines for Security)\"), React.createElement(\"div\", {\n      className: \"spotify-button-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"spotify-button-aref\",\n      href: \"http://localhost:5000/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"/images/spotify_button_image.png\",\n      height: 50,\n      width: 150,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"spotify-button-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, 'Connect & Compare')))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.setState({\n        currentSlide: 'Client'\n      }),\n      className: \"slide-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, this.state.userData.display_name), React.createElement(\"button\", {\n      onClick: () => this.setState({\n        currentSlide: 'Me'\n      }),\n      className: \"slide-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Gabriel\"), React.createElement(\"button\", {\n      onClick: () => this.setState({\n        currentSlide: 'Both'\n      }),\n      className: \"slide-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Match?\")), this.state.currentSlide === 'Client' && React.createElement(Client_Spotify_Data, {\n      analyseTermData: this.analyseTermData,\n      piChartRankings: this.piChartRankings,\n      genreWeighting: this.genreWeighting,\n      getHashParams: this.getHashParams,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), this.state.currentSlide === 'Me' && React.createElement(Personal_Spotify_Data, {\n      analyseTermData: this.analyseTermData,\n      piChartRankings: this.piChartRankings,\n      genreWeighting: this.genreWeighting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), this.state.currentSlide === 'Both' && React.createElement(Comparison, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_comparer/spotify.js"],"names":["$","React","Component","Client_Spotify_Data","Personal_Spotify_Data","Comparison","Spotify","constructor","params","getHashParams","state","access_token","loggedIn","currentSlide","userData","display_name","getPersonalInformation","ajax","url","type","beforeSend","xhr","setRequestHeader","success","data","console","log","setState","error","XMLHttpRequest","textStatus","errorThrown","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","genreWeighting","genres","categories","weights","forEach","count","x","includes","toLowerCase","push","length","piChartRankings","ranks","keys","values","element","Math","trunc","formattedResult","i","analyseTermData","test_array","items","top_artists_names","reduce","accumulator","currentValue","concat","name","top_artists_popularity","popularity","popularity_list","average_artist_rank","genre_quantity","flat","genre_intersection","filter","radialRankings","top_5_artists_graph","slice","top_5_artists_images","genre_weights","spotify_data","render"],"mappings":";AAAA,OAAO,qBAAP;AACA,OAAO,KAAKA,CAAZ,MAAmB,QAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AACA,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAC5BK,EAAAA,WAAW,GAAG;AACV;AACA,UAAMC,MAAM,GAAG,KAAKC,aAAL,EAAf;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,YAAY,EAAE,KAAKF,aAAL,GAAqBE,YAD1B;AAETC,MAAAA,QAAQ,EAAEJ,MAAM,CAACG,YAAP,GAAsB,IAAtB,GAA6B,KAF9B;AAGTE,MAAAA,YAAY,EAAE,QAHL;AAITC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,YAAY,EAAE;AADR;AAJD,KAAb;AAQA,SAAKC,sBAAL;AACH;;AACDA,EAAAA,sBAAsB,GAAG;AACrBhB,IAAAA,CAAC,CAACiB,IAAF,CAAO;AACHC,MAAAA,GAAG,EAAE,+BADF;AAEHC,MAAAA,IAAI,EAAE,KAFH;AAGHC,MAAAA,UAAU,EAAGC,GAAD,IAAS;AACjBA,QAAAA,GAAG,CAACC,gBAAJ,CAAqB,eAArB,EAAsC,YAAY,KAAKZ,KAAL,CAAWC,YAA7D;AACH,OALE;AAMHY,MAAAA,OAAO,EAAGC,IAAD,IAAU;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,aAAKG,QAAL,CAAc;AAACb,UAAAA,QAAQ,EAAEU;AAAX,SAAd;AACH,OATE;AAUHI,MAAAA,KAAK,EAAE,CAACC,cAAD,EAAiBC,UAAjB,EAA6BC,WAA7B,KAA6C;AAChDN,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAaI,UAAzB;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAYK,WAAxB;AACH;AAbE,KAAP;AAeH;;AACDtB,EAAAA,aAAa,GAAG;AACZ,QAAIuB,UAAU,GAAG,EAAjB;AACA,QAAIC,CAAJ;AAAA,QAAOC,CAAC,GAAG,sBAAX;AAAA,QACIC,CAAC,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,SAArB,CAA+B,CAA/B,CADR;;AAEA,WAAQN,CAAC,GAAGC,CAAC,CAACM,IAAF,CAAOL,CAAP,CAAZ,EAAuB;AACvBH,MAAAA,UAAU,CAACC,CAAC,CAAC,CAAD,CAAF,CAAV,GAAmBQ,kBAAkB,CAACR,CAAC,CAAC,CAAD,CAAF,CAArC;AACC;;AACD,WAAOD,UAAP;AACH;;AACDU,EAAAA,cAAc,CAAEC,MAAF,EAAU;AACpB,QAAIC,UAAU,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,SAAf,EAA0B,MAA1B,EAAkC,OAAlC,EAA2C,aAA3C,EAA0D,KAA1D,EAAiE,OAAjE,CAAjB;AACA,UAAMC,OAAO,GAAG,EAAhB;AACAD,IAAAA,UAAU,CAACE,OAAX,CAAmBb,CAAC,IAAI;AACpB,UAAIc,KAAK,GAAG,CAAZ;AACAJ,MAAAA,MAAM,CAACG,OAAP,CAAeE,CAAC,IAAI;AAChB,YAAGA,CAAC,CAACC,QAAF,CAAWhB,CAAC,CAACiB,WAAF,EAAX,CAAH,EAAgC;AAC5BH,UAAAA,KAAK;AACR;AACJ,OAJD;;AAKA,UAAGA,KAAK,GAAC,CAAT,EAAY;AACRF,QAAAA,OAAO,CAACM,IAAR,CAAa;AAAC,eAAKlB,CAAN;AAAS,eAAMc,KAAK,GAACJ,MAAM,CAACS,MAAd,GAAsB;AAApC,SAAb,EADQ,CACgD;AAC3D;AACJ,KAVD;AAWA,WAAOP,OAAP;AACH;;AACDQ,EAAAA,eAAe,CAACC,KAAD,EAAQ;AACnB,QAAIC,IAAI,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,CAAX;AACA,QAAIC,MAAM,GAAE,EAAZ;AACAD,IAAAA,IAAI,CAACT,OAAL,CAAab,CAAC,IAAI;AACd,UAAIc,KAAK,GAAG,CAAZ;AACAO,MAAAA,KAAK,CAACR,OAAN,CAAcW,OAAO,IAAI;AACrB,YAAGxB,CAAC,KAAMyB,IAAI,CAACC,KAAL,CAAW,CAACF,OAAO,GAAC,GAAT,IAAc,EAAzB,CAAD,GAA+B,EAAxC,EAA4C;AACxCV,UAAAA,KAAK;AACR;AACJ,OAJD;AAKAS,MAAAA,MAAM,CAACL,IAAP,CAAYJ,KAAZ;AACH,KARD,EAHmB,CAYnB;;AACA,QAAIa,eAAe,GAAG,EAAtB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,MAAM,CAACJ,MAAP,GAAe,CAApC,EAAuCS,CAAC,EAAxC,EAA4C;AACxC,UAAGL,MAAM,CAACK,CAAD,CAAN,KAAc,CAAjB,EAAoB;AAChBD,QAAAA,eAAe,CAACT,IAAhB,CAAqB;AAAC,mBAASK,MAAM,CAACK,CAAD,CAAhB;AAAoB,sBAAYL,MAAM,CAACK,CAAD,CAAN,GAAY,GAA5C;AAAiD,mBAAS,KAAGA,CAA7D;AAAgE,oBAAUA,CAAC,GAAC,CAAF,GAAI;AAA9E,SAArB;AACH;AACJ;;AACD,WAAOD,eAAP;AACH;;AACDE,EAAAA,eAAe,CAACtC,IAAD,EAAO;AAClB,UAAMuC,UAAU,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,SAAf,CAAnB;AACA,UAAMC,KAAK,GAAGxC,IAAI,CAACwC,KAAnB;AACA,UAAMC,iBAAiB,GAAGD,KAAK,CAACE,MAAN,CAAa,CAACC,WAAD,EAAcC,YAAd,KAA+BD,WAAW,CAACE,MAAZ,CAAmBD,YAAY,CAACE,IAAhC,CAA5C,EAAmF,EAAnF,CAA1B;AACA,UAAMC,sBAAsB,GAAGP,KAAK,CAACE,MAAN,CAAa,CAACC,WAAD,EAAcC,YAAd,KAA+BD,WAAW,CAACE,MAAZ,CAAmB;AAAC,gBAAUD,YAAY,CAACE,IAAxB;AAA8B,cAAQF,YAAY,CAACI;AAAnD,KAAnB,CAA5C,EAAgI,EAAhI,CAA/B;AACA,UAAMC,eAAe,GAAGT,KAAK,CAACE,MAAN,CAAa,CAACC,WAAD,EAAcC,YAAd,KAA+BD,WAAW,CAACE,MAAZ,CAAmBD,YAAY,CAACI,UAAhC,CAA5C,EAAyF,EAAzF,CAAxB;AACA,UAAME,mBAAmB,GAAGV,KAAK,CAACE,MAAN,CAAa,CAACC,WAAD,EAAcC,YAAd,KAA+BD,WAAW,GAAGC,YAAY,CAACI,UAAvE,EAAmF,CAAnF,IAAsF,EAAlH;AACA,UAAMG,cAAc,GAAGX,KAAK,CAACE,MAAN,CAAa,CAACC,WAAD,EAAcC,YAAd,KAA+BD,WAAW,CAACE,MAAZ,CAAmB,CAACD,YAAY,CAACzB,MAAd,CAAnB,CAA5C,EAAuF,EAAvF,EAA2FiC,IAA3F,EAAvB;AACA,UAAMC,kBAAkB,GAAGd,UAAU,CAACe,MAAX,CAAkBrB,OAAO,IAAIkB,cAAc,CAAC1B,QAAf,CAAwBQ,OAAxB,CAA7B,CAA3B;AACA,UAAMsB,cAAc,GAAG,KAAK1B,eAAL,CAAqBoB,eAArB,CAAvB;AACA,UAAMO,mBAAmB,GAAIhB,KAAK,CAACiB,KAAN,CAAY,CAAZ,EAAc,CAAd,CAAD,CAAmBf,MAAnB,CAA0B,CAACC,WAAD,EAAcC,YAAd,KAA+BD,WAAW,CAACE,MAAZ,CAAmB;AAAC,WAAKD,YAAY,CAACE,IAAnB;AAAyB,WAAKF,YAAY,CAACI;AAA3C,KAAnB,CAAzD,EAAqI,EAArI,CAA5B;AACA,UAAMU,oBAAoB,GAAGlB,KAAK,CAACiB,KAAN,CAAY,CAAZ,EAAc,CAAd,CAA7B;AACA,UAAME,aAAa,GAAG,KAAKzC,cAAL,CAAoBiC,cAApB,CAAtB;AACA,UAAMS,YAAY,GAAG;AACjBnB,MAAAA,iBADiB;AAEjBe,MAAAA,mBAFiB;AAGjBE,MAAAA,oBAHiB;AAIjBC,MAAAA,aAJiB;AAKjBZ,MAAAA,sBALiB;AAMjBE,MAAAA,eANiB;AAOjBC,MAAAA,mBAPiB;AAQjBC,MAAAA,cARiB;AASjBE,MAAAA,kBATiB;AAUjBE,MAAAA;AAViB,KAArB;AAYA,WAAOK,YAAP;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CADJ,EAGK,CAAC,KAAK3E,KAAL,CAAWE,QAAZ,GACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFAFA,EAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EAHA,EAIA;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAC,qBAAb;AAAmC,MAAA,IAAI,EAAC,6BAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAC,kCAAT;AAA4C,MAAA,MAAM,EAAE,EAApD;AAAwD,MAAA,KAAK,EAAE,GAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAG,MAAA,SAAS,EAAC,qBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoC,mBAApC,CAFJ,CADJ,CAJA,CADH,GAaD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKe,QAAL,CAAc;AAACd,QAAAA,YAAY,EAAE;AAAf,OAAd,CAAvB;AACA,MAAA,SAAS,EAAC,cADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAC0B,KAAKH,KAAL,CAAWI,QAAX,CAAoBC,YAD9C,CADJ,EAGI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKY,QAAL,CAAc;AAACd,QAAAA,YAAY,EAAE;AAAf,OAAd,CAAvB;AACA,MAAA,SAAS,EAAC,cADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHJ,EAKI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKc,QAAL,CAAc;AAACd,QAAAA,YAAY,EAAE;AAAf,OAAd,CAAvB;AACA,MAAA,SAAS,EAAC,cADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,CADJ,EASK,KAAKH,KAAL,CAAWG,YAAX,KAA4B,QAA5B,IACD,oBAAC,mBAAD;AACI,MAAA,eAAe,EAAE,KAAKiD,eAD1B;AAEI,MAAA,eAAe,EAAE,KAAKT,eAF1B;AAGI,MAAA,cAAc,EAAE,KAAKX,cAHzB;AAII,MAAA,aAAa,EAAE,KAAKjC,aAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,EAiBK,KAAKC,KAAL,CAAWG,YAAX,KAA4B,IAA5B,IACD,oBAAC,qBAAD;AACI,MAAA,eAAe,EAAE,KAAKiD,eAD1B;AAEI,MAAA,eAAe,EAAE,KAAKT,eAF1B;AAGI,MAAA,cAAc,EAAE,KAAKX,cAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBJ,EAwBK,KAAKhC,KAAL,CAAWG,YAAX,KAA4B,MAA5B,IACD,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBJ,CAhBJ,CADJ;AAgDH;;AAzJ2B;;AA4JhC,eAAeP,OAAf","sourcesContent":["import './graph_styling.css';\nimport * as $ from 'jquery';\nimport React, { Component } from 'react';\nimport Client_Spotify_Data from './client_spotify_data';\nimport Personal_Spotify_Data from './personal_spotify_data';\nimport Comparison from './comparison';\nclass Spotify extends Component {\n    constructor() {\n        super();\n        const params = this.getHashParams()\n        this.state = {\n            access_token: this.getHashParams().access_token,\n            loggedIn: params.access_token ? true : false,\n            currentSlide: 'Client',\n            userData: {\n                display_name: ''\n            },\n        }\n        this.getPersonalInformation();\n    }\n    getPersonalInformation() {\n        $.ajax({\n            url: 'https://api.spotify.com/v1/me',\n            type: \"GET\",\n            beforeSend: (xhr) => {\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.state.access_token);\n            },\n            success: (data) => {\n                console.log(data)\n                this.setState({userData: data});\n            },\n            error: (XMLHttpRequest, textStatus, errorThrown) => { \n                console.log(\"Status: \" + textStatus); \n                console.log(\"Error: \" + errorThrown); \n            },\n        });\n    }\n    getHashParams() {\n        var hashParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n            q = window.location.hash.substring(1);\n        while ( e = r.exec(q)) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n        }\n        return hashParams;\n    }\n    genreWeighting (genres) {\n        var categories = ['Pop', 'Rap', 'Country', 'Rock', 'Metal', 'Alternative', 'R&b', 'House'];\n        const weights = [];\n        categories.forEach(e => {\n            var count = 0;\n            genres.forEach(x => {\n                if(x.includes(e.toLowerCase())) {\n                    count ++;\n                }\n            });\n            if(count>0) {\n                weights.push({'y': e, 'x': (count/genres.length)*100}); // percent ration of total\n            }\n        });\n        return weights;\n    }\n    piChartRankings(ranks) {\n        let keys = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n        var values =[]\n        keys.forEach(e => {\n            var count = 0;\n            ranks.forEach(element => {\n                if(e === (Math.trunc((element-0.5)/10))*10) {\n                    count ++;\n                }\n            })\n            values.push(count)\n        })\n        // Radial Chart \n        var formattedResult = [];\n        for (var i = 0; i <= values.length -1; i++) {\n            if(values[i] !== 0) {\n                formattedResult.push({'angle': values[i],'subLabel': values[i] + '%', 'label': 10*i, 'radius': i/2+5 })\n            }\n        }\n        return formattedResult;\n    }\n    analyseTermData(data) {\n        const test_array = [\"pop\", \"rap\", \"ssdsdsd\"];\n        const items = data.items;\n        const top_artists_names = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.name), []);\n        const top_artists_popularity = items.reduce((accumulator, currentValue) => accumulator.concat({'artist': currentValue.name, 'rank': currentValue.popularity}), []);\n        const popularity_list = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.popularity), []);\n        const average_artist_rank = items.reduce((accumulator, currentValue) => accumulator + currentValue.popularity, 0)/50;\n        const genre_quantity = items.reduce((accumulator, currentValue) => accumulator.concat([currentValue.genres]), []).flat(); \n        const genre_intersection = test_array.filter(element => genre_quantity.includes(element));\n        const radialRankings = this.piChartRankings(popularity_list)\n        const top_5_artists_graph = (items.slice(0,5)).reduce((accumulator, currentValue) => accumulator.concat({'x': currentValue.name, 'y': currentValue.popularity}), []);\n        const top_5_artists_images = items.slice(0,5);\n        const genre_weights = this.genreWeighting(genre_quantity);\n        const spotify_data = {\n            top_artists_names,\n            top_5_artists_graph,\n            top_5_artists_images,\n            genre_weights,\n            top_artists_popularity,\n            popularity_list, \n            average_artist_rank, \n            genre_quantity, \n            genre_intersection,\n            radialRankings,\n        }\n        return spotify_data;\n    }\n    render() {\n        return(\n            <div>\n                <h1>How Similar Are Our Music Tastes?</h1>\n                \n                {!this.state.loggedIn ? (\n                    <div>\n                    <h3>Find out if we match!</h3>\n                    <h4>Click the button in order to fetch your long-term listening data for analyis!</h4>\n                    <h5>(This service is follows Spotify's Auth-Flow Guidelines for Security)</h5>\n                    <div className='spotify-button-div'>\n                        <a className='spotify-button-aref' href='http://localhost:5000/login'>\n                            <img src='/images/spotify_button_image.png' height={50} width={150}/>\n                            <p className='spotify-button-text'>{'Connect & Compare'}</p>\n                        </a>\n                    </div>\n                    </div>\n                ) : (\n                <div>\n                    <div>\n                        <button onClick={() => this.setState({currentSlide: 'Client'})} \n                        className='slide-button'>{this.state.userData.display_name}</button>\n                        <button onClick={() => this.setState({currentSlide: 'Me'})} \n                        className='slide-button'>Gabriel</button>\n                        <button onClick={() => this.setState({currentSlide: 'Both'})} \n                        className='slide-button'>Match?</button>\n                    </div>\n                    {this.state.currentSlide === 'Client' &&\n                    <Client_Spotify_Data\n                        analyseTermData={this.analyseTermData}\n                        piChartRankings={this.piChartRankings}\n                        genreWeighting={this.genreWeighting}\n                        getHashParams={this.getHashParams}\n                    />\n                    }\n                    {this.state.currentSlide === 'Me' &&\n                    <Personal_Spotify_Data\n                        analyseTermData={this.analyseTermData}\n                        piChartRankings={this.piChartRankings}\n                        genreWeighting={this.genreWeighting}\n                    />\n                    }\n                    {this.state.currentSlide === 'Both' &&\n                    <Comparison/>\n                    }\n                </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}