{"ast":null,"code":"// import Spotify from 'spotify-web-api-js';\nimport * as $ from 'jquery';\n\nfunction getTopArtists() {\n  // ['short_term', 'medium_term', 'long_term'].map(e => {\n  $.ajax({\n    url: 'https://api.spotify.com/v1/me/top/artists?time_range=long_term&limit=50&offset=0',\n    type: \"GET\",\n    beforeSend: xhr => {\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.getHashParams().access_token);\n    },\n    success: data => {\n      this.analyseTermData(data);\n    }\n  }); // });\n}\n\nfunction piChartRankings(ranks) {\n  let keys = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n  var values = [];\n  keys.forEach(e => {\n    var count = 0;\n    ranks.forEach(element => {\n      if (e === Math.trunc((element - 0.5) / 10) * 10) {\n        count++;\n      }\n    });\n    values.push(count);\n  }); // Radial Chart \n\n  var formattedResult = [];\n\n  for (var i = 0; i <= values.length - 1; i++) {\n    if (values[i] !== 0) {\n      formattedResult.push({\n        'angle': values[i],\n        'label': 10 * i,\n        'radius': i / 2 + 5\n      });\n    }\n  } // Bar Series\n  // var formattedResult = [];\n  // for (var i = 0; i <= values.length -1; i++) {\n  //     if(values[i] !== 0) {\n  //         formattedResult.push({'x': i, 'y': values[i],})\n  //     }\n  // }\n\n\n  return formattedResult;\n}\n\nfunction analyseTermData(data) {\n  const test_array = [\"pop\", \"rap\", \"ssdsdsd\"];\n  const items = data.items;\n  let top_artists = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.name), []);\n  let top_artists_popularity = items.reduce((accumulator, currentValue) => accumulator.concat({\n    'artist': currentValue.name,\n    'rank': currentValue.popularity\n  }), []);\n  let popularity_list = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.popularity), []);\n  let average_artist_rank = items.reduce((accumulator, currentValue) => accumulator + currentValue.popularity, 0) / 50;\n  let genre_quantity = items.reduce((accumulator, currentValue) => accumulator.concat([currentValue.genres]), []).flat();\n  const genre_intersection = test_array.filter(element => genre_quantity.includes(element));\n  const radialRankings = this.piChartRankings(popularity_list); // if(term === 'short_term'){\n  //     this.setState({ short_term: {top_artists,\n  //          top_artists_popularity, \n  //          average_artist_rank, genre_quantity, genre_intersection,}});\n  // } else if(term === 'medium_term'){\n  //     this.setState({ medium_term: {top_artists, \n  //         top_artists_popularity,\n  //          average_artist_rank, genre_quantity, genre_intersection,}});\n  // } else {\n\n  const long_term_data = {\n    top_artists,\n    top_artists_popularity,\n    popularity_list,\n    average_artist_rank,\n    genre_quantity,\n    genre_intersection,\n    radialRankings\n  };\n  return long_term_data; // }        \n}\n\nexport default {\n  getTopArtists,\n  analyseTermData,\n  piChartRankings\n};","map":{"version":3,"sources":["/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_previewer/spotify-service-worker.js"],"names":["$","getTopArtists","ajax","url","type","beforeSend","xhr","setRequestHeader","getHashParams","access_token","success","data","analyseTermData","piChartRankings","ranks","keys","values","forEach","e","count","element","Math","trunc","push","formattedResult","i","length","test_array","items","top_artists","reduce","accumulator","currentValue","concat","name","top_artists_popularity","popularity","popularity_list","average_artist_rank","genre_quantity","genres","flat","genre_intersection","filter","includes","radialRankings","long_term_data"],"mappings":"AAAA;AACA,OAAO,KAAKA,CAAZ,MAAmB,QAAnB;;AAEA,SAASC,aAAT,GAAyB;AACrB;AACID,EAAAA,CAAC,CAACE,IAAF,CAAO;AACHC,IAAAA,GAAG,EAAE,kFADF;AAEHC,IAAAA,IAAI,EAAE,KAFH;AAGHC,IAAAA,UAAU,EAAGC,GAAD,IAAS;AACrBA,MAAAA,GAAG,CAACC,gBAAJ,CAAqB,eAArB,EAAsC,YAAY,KAAKC,aAAL,GAAqBC,YAAvE;AACC,KALE;AAMHC,IAAAA,OAAO,EAAGC,IAAD,IAAU;AACnB,WAAKC,eAAL,CAAqBD,IAArB;AACC;AARE,GAAP,EAFiB,CAYrB;AACH;;AACD,SAASE,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,MAAIC,IAAI,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,CAAX;AACA,MAAIC,MAAM,GAAE,EAAZ;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAaC,CAAC,IAAI;AACd,QAAIC,KAAK,GAAG,CAAZ;AACAL,IAAAA,KAAK,CAACG,OAAN,CAAcG,OAAO,IAAI;AACrB,UAAGF,CAAC,KAAMG,IAAI,CAACC,KAAL,CAAW,CAACF,OAAO,GAAC,GAAT,IAAc,EAAzB,CAAD,GAA+B,EAAxC,EAA4C;AACxCD,QAAAA,KAAK;AACR;AACJ,KAJD;AAKAH,IAAAA,MAAM,CAACO,IAAP,CAAYJ,KAAZ;AACH,GARD,EAH4B,CAY5B;;AACA,MAAIK,eAAe,GAAG,EAAtB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIT,MAAM,CAACU,MAAP,GAAe,CAApC,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QAAGT,MAAM,CAACS,CAAD,CAAN,KAAc,CAAjB,EAAoB;AAChBD,MAAAA,eAAe,CAACD,IAAhB,CAAqB;AAAC,iBAASP,MAAM,CAACS,CAAD,CAAhB;AAAqB,iBAAS,KAAGA,CAAjC;AAAoC,kBAAUA,CAAC,GAAC,CAAF,GAAI;AAAlD,OAArB;AACH;AACJ,GAlB2B,CAmB5B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAOD,eAAP;AAEH;;AACD,SAASZ,eAAT,CAAyBD,IAAzB,EAA+B;AAC3B,QAAMgB,UAAU,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,SAAf,CAAnB;AACA,QAAMC,KAAK,GAAGjB,IAAI,CAACiB,KAAnB;AACA,MAAIC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAa,CAACC,WAAD,EAAcC,YAAd,KAA+BD,WAAW,CAACE,MAAZ,CAAmBD,YAAY,CAACE,IAAhC,CAA5C,EAAmF,EAAnF,CAAlB;AACA,MAAIC,sBAAsB,GAAGP,KAAK,CAACE,MAAN,CAAa,CAACC,WAAD,EAAcC,YAAd,KAA+BD,WAAW,CAACE,MAAZ,CAAmB;AAAC,cAAUD,YAAY,CAACE,IAAxB;AAA8B,YAAQF,YAAY,CAACI;AAAnD,GAAnB,CAA5C,EAAgI,EAAhI,CAA7B;AACA,MAAIC,eAAe,GAAGT,KAAK,CAACE,MAAN,CAAa,CAACC,WAAD,EAAcC,YAAd,KAA+BD,WAAW,CAACE,MAAZ,CAAmBD,YAAY,CAACI,UAAhC,CAA5C,EAAyF,EAAzF,CAAtB;AACA,MAAIE,mBAAmB,GAAGV,KAAK,CAACE,MAAN,CAAa,CAACC,WAAD,EAAcC,YAAd,KAA+BD,WAAW,GAAGC,YAAY,CAACI,UAAvE,EAAmF,CAAnF,IAAsF,EAAhH;AACA,MAAIG,cAAc,GAAGX,KAAK,CAACE,MAAN,CAAa,CAACC,WAAD,EAAcC,YAAd,KAA+BD,WAAW,CAACE,MAAZ,CAAmB,CAACD,YAAY,CAACQ,MAAd,CAAnB,CAA5C,EAAuF,EAAvF,EAA2FC,IAA3F,EAArB;AACA,QAAMC,kBAAkB,GAAGf,UAAU,CAACgB,MAAX,CAAkBvB,OAAO,IAAImB,cAAc,CAACK,QAAf,CAAwBxB,OAAxB,CAA7B,CAA3B;AACA,QAAMyB,cAAc,GAAG,KAAKhC,eAAL,CAAqBwB,eAArB,CAAvB,CAT2B,CAU3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMS,cAAc,GAAG;AACnBjB,IAAAA,WADmB;AAEnBM,IAAAA,sBAFmB;AAGnBE,IAAAA,eAHmB;AAInBC,IAAAA,mBAJmB;AAKnBC,IAAAA,cALmB;AAMnBG,IAAAA,kBANmB;AAOnBG,IAAAA;AAPmB,GAAvB;AASA,SAAOC,cAAP,CA7B2B,CA8B3B;AACH;;AACD,eAAe;AAAE7C,EAAAA,aAAF;AAAiBW,EAAAA,eAAjB;AAAkCC,EAAAA;AAAlC,CAAf","sourcesContent":["// import Spotify from 'spotify-web-api-js';\nimport * as $ from 'jquery';\n\nfunction getTopArtists() {\n    // ['short_term', 'medium_term', 'long_term'].map(e => {\n        $.ajax({\n            url: 'https://api.spotify.com/v1/me/top/artists?time_range=long_term&limit=50&offset=0',\n            type: \"GET\",\n            beforeSend: (xhr) => {\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.getHashParams().access_token);\n            },\n            success: (data) => {\n            this.analyseTermData(data);\n            }\n        });\n    // });\n}\nfunction piChartRankings(ranks) {\n    let keys = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n    var values =[]\n    keys.forEach(e => {\n        var count = 0;\n        ranks.forEach(element => {\n            if(e === (Math.trunc((element-0.5)/10))*10) {\n                count ++;\n            }\n        })\n        values.push(count)\n    })\n    // Radial Chart \n    var formattedResult = [];\n    for (var i = 0; i <= values.length -1; i++) {\n        if(values[i] !== 0) {\n            formattedResult.push({'angle': values[i], 'label': 10*i, 'radius': i/2+5 })\n        }\n    }\n    // Bar Series\n    // var formattedResult = [];\n    // for (var i = 0; i <= values.length -1; i++) {\n    //     if(values[i] !== 0) {\n    //         formattedResult.push({'x': i, 'y': values[i],})\n    //     }\n    // }\n    return formattedResult;\n\n}\nfunction analyseTermData(data) {\n    const test_array = [\"pop\", \"rap\", \"ssdsdsd\"];\n    const items = data.items;\n    let top_artists = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.name), []);\n    let top_artists_popularity = items.reduce((accumulator, currentValue) => accumulator.concat({'artist': currentValue.name, 'rank': currentValue.popularity}), []);\n    let popularity_list = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.popularity), []);\n    let average_artist_rank = items.reduce((accumulator, currentValue) => accumulator + currentValue.popularity, 0)/50;\n    let genre_quantity = items.reduce((accumulator, currentValue) => accumulator.concat([currentValue.genres]), []).flat(); \n    const genre_intersection = test_array.filter(element => genre_quantity.includes(element));\n    const radialRankings = this.piChartRankings(popularity_list)\n    // if(term === 'short_term'){\n    //     this.setState({ short_term: {top_artists,\n    //          top_artists_popularity, \n    //          average_artist_rank, genre_quantity, genre_intersection,}});\n    // } else if(term === 'medium_term'){\n    //     this.setState({ medium_term: {top_artists, \n    //         top_artists_popularity,\n    //          average_artist_rank, genre_quantity, genre_intersection,}});\n    // } else {\n    \n    const long_term_data = { \n        top_artists,\n        top_artists_popularity,\n        popularity_list, \n        average_artist_rank, \n        genre_quantity, \n        genre_intersection,\n        radialRankings \n    };\n    return long_term_data;\n    // }        \n}\nexport default { getTopArtists, analyseTermData, piChartRankings };\n"]},"metadata":{},"sourceType":"module"}