{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_comparer/spotify_previewer/spotify_previewer.js\";\nimport React, { Component } from 'react';\nimport * as $ from \"jquery\";\nimport Chart_Constructor from './chart_constructor';\nimport spotifyServiceWorker from './spotify-service-worker';\nimport './graph_styling.css'; // https://medium.com/@jonnykalambay/now-playing-using-spotifys-awesome-api-with-react-7db8173a7b13?\n\nclass Spotify_Previewer extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const default_data = [{\n      'x': 4,\n      'y': 2\n    }]; // if (window.performance) {\n    //     if (performance.navigation.type == 1) {\n    //         window.location.replace('http://localhost:5000/login');\n    //     }\n    //   }\n\n    this.state = {\n      access_token: '',\n      loggedIn: params.access_token ? true : false,\n      top_artists: default_data,\n      genre_weights: [{\n        'x': 1,\n        'y': 'rap'\n      }],\n      top_5_artists_graph: [{\n        'x': 'A',\n        'y': 2\n      }],\n      top_5_artists_images: [{\n        'name': '',\n        'images': [{\n          'url': ''\n        }]\n      }],\n      top_artists_popularity: default_data,\n      popularity_list: default_data,\n      average_artist_rank: 0,\n      genre_quantity: default_data,\n      genre_intersection: default_data,\n      radialRankings: [{\n        'angle': 360\n      }]\n    };\n\n    if (params.access_token) {\n      this.setState({\n        access_token: params.access_token\n      });\n    }\n  }\n\n  radarChartGenreWeighting(genres) {\n    var categories = ['pop', 'rap', 'country', 'rock', 'metal', 'alternative', 'r&b', 'house'];\n    const weights = [];\n    categories.forEach(e => {\n      var count = 0;\n      genres.forEach(x => {\n        if (x.includes(e)) {\n          count++;\n        }\n      });\n\n      if (count > 0) {\n        weights.push({\n          'y': e,\n          'x': count * 2\n        }); // (x 2) makes a ratio of 50 artists * 100 -> percent\n      }\n    });\n    console.log(weights);\n    return weights;\n  }\n\n  piChartRankings(ranks) {\n    let keys = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n    var values = [];\n    keys.forEach(e => {\n      var count = 0;\n      ranks.forEach(element => {\n        if (e === Math.trunc((element - 0.5) / 10) * 10) {\n          count++;\n        }\n      });\n      values.push(count);\n    }); // Radial Chart \n\n    var formattedResult = [];\n\n    for (var i = 0; i <= values.length - 1; i++) {\n      if (values[i] !== 0) {\n        formattedResult.push({\n          'angle': values[i],\n          'label': 10 * i,\n          'radius': i / 2 + 5\n        });\n      }\n    } // Bar Series\n    // var formattedResult = [];\n    // for (var i = 0; i <= values.length -1; i++) {\n    //     if(values[i] !== 0) {\n    //         formattedResult.push({'x': i, 'y': values[i],})\n    //     }\n    // }\n\n\n    return formattedResult;\n  }\n\n  analyseTermData(data) {\n    const test_array = [\"pop\", \"rap\", \"ssdsdsd\"];\n    const items = data.items;\n    const top_artists_names = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.name), []);\n    const top_artists_popularity = items.reduce((accumulator, currentValue) => accumulator.concat({\n      'artist': currentValue.name,\n      'rank': currentValue.popularity\n    }), []);\n    const popularity_list = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.popularity), []);\n    const average_artist_rank = items.reduce((accumulator, currentValue) => accumulator + currentValue.popularity, 0) / 50;\n    const genre_quantity = items.reduce((accumulator, currentValue) => accumulator.concat([currentValue.genres]), []).flat();\n    const genre_intersection = test_array.filter(element => genre_quantity.includes(element));\n    const radialRankings = this.piChartRankings(popularity_list);\n    const top_5_artists_graph = items.slice(0, 5).reduce((accumulator, currentValue) => accumulator.concat({\n      'x': currentValue.name,\n      'y': currentValue.popularity\n    }), []);\n    const top_5_artists_images = items.slice(0, 5);\n    const genre_weights = this.radarChartGenreWeighting(genre_quantity);\n    console.log(genre_weights);\n    this.setState({\n      top_artists_names,\n      top_5_artists_graph,\n      top_5_artists_images,\n      genre_weights,\n      top_artists_popularity,\n      popularity_list,\n      average_artist_rank,\n      genre_quantity,\n      genre_intersection,\n      radialRankings\n    });\n  }\n\n  getTopArtists(token) {\n    $.ajax({\n      url: 'https://api.spotify.com/v1/me/top/artists?time_range=long_term&limit=50&offset=0',\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        this.analyseTermData(data);\n      }\n    });\n  }\n\n  componentDidMount() {\n    if (this.state.loggedIn) {\n      this.getTopArtists(this.getHashParams().access_token);\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"spotify-components\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"How Similar Are Our Music Tastes?\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"This is super important...\"), !this.state.loggedIn ? React.createElement(\"div\", {\n      className: \"spotify-button-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"http://localhost:5000/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"spotify-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"'Do Something with Spotify'\"))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"You Like:\"), React.createElement(Chart_Constructor, {\n      average_artist_rank: this.state.average_artist_rank,\n      top_5_artists_images: this.state.top_5_artists_images,\n      data1: this.state.radialRankings,\n      data2: this.state.top_5_artists_graph,\n      data3: this.state.genre_weights,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Spotify_Previewer;","map":{"version":3,"sources":["/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_comparer/spotify_previewer/spotify_previewer.js"],"names":["React","Component","$","Chart_Constructor","spotifyServiceWorker","Spotify_Previewer","constructor","params","getHashParams","default_data","state","access_token","loggedIn","top_artists","genre_weights","top_5_artists_graph","top_5_artists_images","top_artists_popularity","popularity_list","average_artist_rank","genre_quantity","genre_intersection","radialRankings","setState","radarChartGenreWeighting","genres","categories","weights","forEach","e","count","x","includes","push","console","log","piChartRankings","ranks","keys","values","element","Math","trunc","formattedResult","i","length","analyseTermData","data","test_array","items","top_artists_names","reduce","accumulator","currentValue","concat","name","popularity","flat","filter","slice","getTopArtists","token","ajax","url","type","beforeSend","xhr","setRequestHeader","success","componentDidMount","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as $ from \"jquery\";\nimport Chart_Constructor from './chart_constructor';\nimport spotifyServiceWorker from './spotify-service-worker';\nimport './graph_styling.css';\n// https://medium.com/@jonnykalambay/now-playing-using-spotifys-awesome-api-with-react-7db8173a7b13?\n\nclass Spotify_Previewer extends Component {\n    constructor(){\n        super();\n        const params = this.getHashParams()\n        const default_data = [{'x': 4, 'y': 2}];\n        // if (window.performance) {\n        //     if (performance.navigation.type == 1) {\n        //         window.location.replace('http://localhost:5000/login');\n        //     }\n        //   }\n        this.state = {\n            access_token: '',\n            loggedIn: params.access_token ? true : false,\n            top_artists: default_data,\n            genre_weights: \n                [{'x': 1, 'y': 'rap'}],\n            top_5_artists_graph: [{'x': 'A', 'y': 2}],\n            top_5_artists_images: [{'name': '', 'images': [{'url': ''}]}],\n            top_artists_popularity: default_data,\n            popularity_list: default_data, \n            average_artist_rank: 0, \n            genre_quantity: default_data, \n            genre_intersection: default_data,\n            radialRankings: [{'angle': 360}], \n        }\n        if (params.access_token) {\n            this.setState(({\n                access_token: params.access_token\n            }));\n        }\n    }\n    radarChartGenreWeighting (genres) {\n        var categories = ['pop', 'rap', 'country', 'rock', 'metal', 'alternative', 'r&b', 'house'];\n        const weights = [];\n        categories.forEach(e => {\n            var count = 0;\n            genres.forEach(x => {\n                if(x.includes(e)) {\n                    count ++;\n                }\n            });\n            if(count>0) {\n            weights.push({'y': e, 'x': count*2,}); // (x 2) makes a ratio of 50 artists * 100 -> percent\n            }\n        });\n        console.log(weights)\n        return weights;\n    }\n    piChartRankings(ranks) {\n        let keys = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n        var values =[]\n        keys.forEach(e => {\n            var count = 0;\n            ranks.forEach(element => {\n                if(e === (Math.trunc((element-0.5)/10))*10) {\n                    count ++;\n                }\n            })\n            values.push(count)\n        })\n        // Radial Chart \n        var formattedResult = [];\n        for (var i = 0; i <= values.length -1; i++) {\n            if(values[i] !== 0) {\n                formattedResult.push({'angle': values[i], 'label': 10*i, 'radius': i/2+5 })\n            }\n        }\n        // Bar Series\n        // var formattedResult = [];\n        // for (var i = 0; i <= values.length -1; i++) {\n        //     if(values[i] !== 0) {\n        //         formattedResult.push({'x': i, 'y': values[i],})\n        //     }\n        // }\n        return formattedResult;\n    }\n    analyseTermData(data) {\n        const test_array = [\"pop\", \"rap\", \"ssdsdsd\"];\n        const items = data.items;\n        const top_artists_names = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.name), []);\n        const top_artists_popularity = items.reduce((accumulator, currentValue) => accumulator.concat({'artist': currentValue.name, 'rank': currentValue.popularity}), []);\n        const popularity_list = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.popularity), []);\n        const average_artist_rank = items.reduce((accumulator, currentValue) => accumulator + currentValue.popularity, 0)/50;\n        const genre_quantity = items.reduce((accumulator, currentValue) => accumulator.concat([currentValue.genres]), []).flat(); \n        const genre_intersection = test_array.filter(element => genre_quantity.includes(element));\n        const radialRankings = this.piChartRankings(popularity_list)\n        const top_5_artists_graph = (items.slice(0,5)).reduce((accumulator, currentValue) => accumulator.concat({'x': currentValue.name, 'y': currentValue.popularity}), []);\n        const top_5_artists_images = items.slice(0,5);\n        const genre_weights = this.radarChartGenreWeighting(genre_quantity);\n        console.log(genre_weights)\n        this.setState( { \n            top_artists_names,\n            top_5_artists_graph,\n            top_5_artists_images,\n            genre_weights,\n            top_artists_popularity,\n            popularity_list, \n            average_artist_rank, \n            genre_quantity, \n            genre_intersection,\n            radialRankings \n        });     \n    }\n    getTopArtists(token) {\n            $.ajax({\n                url: 'https://api.spotify.com/v1/me/top/artists?time_range=long_term&limit=50&offset=0',\n                type: \"GET\",\n                beforeSend: (xhr) => {\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n                },\n                success: (data) => {\n                    this.analyseTermData(data)\n                }\n            });\n    }\n    componentDidMount(){\n        if(this.state.loggedIn) {\n            this.getTopArtists(this.getHashParams().access_token);\n        } \n    }\n   \n    getHashParams() {\n        var hashParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n            q = window.location.hash.substring(1);\n        while ( e = r.exec(q)) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n        }\n        return hashParams;\n    }\n\n    render() {\n            return (\n                <div className='spotify-components'>\n                    <h1>How Similar Are Our Music Tastes?</h1>\n                    <h3>This is super important...</h3>\n                {!this.state.loggedIn ? (\n                    \n                <div className='spotify-button-div'>\n                    <a href='http://localhost:5000/login'>\n                        <button className='spotify-button'>'Do Something with Spotify'</button>\n                    </a>\n                </div>\n                ) : (\n                <div>\n                    <h2>You Like:</h2>\n                    <Chart_Constructor\n                        average_artist_rank={this.state.average_artist_rank}\n                        top_5_artists_images={this.state.top_5_artists_images}\n                        data1={this.state.radialRankings} \n                        data2={this.state.top_5_artists_graph}\n                        data3={this.state.genre_weights}\n                    />\n                </div>\n                )\n                } \n                </div>\n            );\n    }\n}\n\nexport default Spotify_Previewer;"]},"metadata":{},"sourceType":"module"}