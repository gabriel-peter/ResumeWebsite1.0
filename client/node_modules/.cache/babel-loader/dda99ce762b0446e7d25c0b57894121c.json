{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_comparer/personal_spotify_data.js\";\nimport './graph_styling.css';\nimport React, { Component } from 'react';\nimport * as $ from \"jquery\";\nimport Chart_Constructor from './chart_constructor';\n\nclass Personal_Spotify_Data extends Component {\n  constructor() {\n    super();\n    const access_token = 'BQD7brPt2c3ENXb-WkF0X1a0IlM7HeFUrIRiay7TPRAd-2ekyVjltCLNLJTiS_eU6RBYFhCxZWq7qRwVMPWWLwYu-fEbE1A9HQeqzzqwQUHbFGG_OU3iF2Gkrt8B6jLb-mYIxtCKlKjXLD5DlRnQyVDSvIZ9L83VMm30TuZcDeU';\n    const refresh_token = 'AQAoiRmHjuYjbQz51gEUXjL98e_PlSwPcGonvYfxS6oOs7tHhakvYvWhohZNwrNMx1k4OnIdyeKBg77UL9w9xpmQC0MpAZ92uHpzobO0pFNaADhU9eKHzeg8OtmNatvoY84'; // https://developer.spotify.com/documentation/general/guides/authorization-guide/\n\n    this.state = {\n      access_token: access_token,\n      refresh_token: refresh_token,\n      loggedIn: access_token ? true : false,\n      spotify_data: {\n        top_artists: [{\n          'x': 0,\n          'y': 0\n        }],\n        genre_weights: [{\n          'x': 0,\n          'y': 'Undef'\n        }],\n        top_5_artists_graph: [{\n          'x': 'Undef',\n          'y': 0\n        }],\n        top_5_artists_images: [{\n          'name': '',\n          'images': [{\n            'url': ''\n          }]\n        }],\n        top_artists_popularity: [{\n          'x': 0,\n          'y': 0\n        }],\n        popularity_list: [{\n          'x': 0,\n          'y': 0\n        }],\n        average_artist_rank: 0,\n        genre_quantity: [{\n          'x': 0,\n          'y': 0\n        }],\n        genre_intersection: [{\n          'x': 0,\n          'y': 0\n        }],\n        radialRankings: [{\n          'angle': 360,\n          'label': 'f',\n          'subLabel': 'f'\n        }]\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.refreshToken();\n  }\n\n  refreshToken() {\n    $.ajax({\n      url: '/refresh_token',\n      data: {\n        'refresh_token': this.state.refresh_token\n      },\n      success: data => {\n        this.setState({\n          access_token: data.access_token\n        }, () => {\n          this.getTopArtists();\n        });\n      }\n    });\n  }\n\n  getTopArtists() {\n    $.ajax({\n      url: 'https://api.spotify.com/v1/me/top/artists?time_range=long_term&limit=50&offset=0',\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.state.access_token);\n      },\n      success: data => {\n        const spotify_data = this.props.analyseTermData(data);\n        this.setState({\n          spotify_data\n        });\n      },\n      error: (XMLHttpRequest, textStatus, errorThrown) => {\n        console.log(\"Status: \" + textStatus);\n        console.log(\"Error: \" + errorThrown);\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"I Like:\"), React.createElement(Chart_Constructor, {\n      owner: \"me\",\n      average_artist_rank: this.state.spotify_data.average_artist_rank,\n      top_5_artists_images: this.state.spotify_data.top_5_artists_images,\n      data1: this.state.spotify_data.radialRankings,\n      data2: this.state.spotify_data.top_5_artists_graph,\n      genres: this.state.spotify_data.genre_weights,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Personal_Spotify_Data;","map":{"version":3,"sources":["/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_comparer/personal_spotify_data.js"],"names":["React","Component","$","Chart_Constructor","Personal_Spotify_Data","constructor","access_token","refresh_token","state","loggedIn","spotify_data","top_artists","genre_weights","top_5_artists_graph","top_5_artists_images","top_artists_popularity","popularity_list","average_artist_rank","genre_quantity","genre_intersection","radialRankings","componentDidMount","refreshToken","ajax","url","data","success","setState","getTopArtists","type","beforeSend","xhr","setRequestHeader","props","analyseTermData","error","XMLHttpRequest","textStatus","errorThrown","console","log","render"],"mappings":";AAAA,OAAO,qBAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AACA,MAAMC,qBAAN,SAAoCH,SAApC,CAA8C;AAC1CI,EAAAA,WAAW,GAAG;AACV;AACA,UAAMC,YAAY,GAAE,6KAApB;AACA,UAAMC,aAAa,GAAG,qIAAtB,CAHU,CAIV;;AACA,SAAKC,KAAL,GAAa;AACTF,MAAAA,YAAY,EAAEA,YADL;AAETC,MAAAA,aAAa,EAAEA,aAFN;AAGTE,MAAAA,QAAQ,EAAEH,YAAY,GAAG,IAAH,GAAU,KAHvB;AAITI,MAAAA,YAAY,EAAE;AACVC,QAAAA,WAAW,EAAE,CAAC;AAAC,eAAK,CAAN;AAAS,eAAK;AAAd,SAAD,CADH;AAEVC,QAAAA,aAAa,EAAE,CAAC;AAAC,eAAK,CAAN;AAAS,eAAK;AAAd,SAAD,CAFL;AAGVC,QAAAA,mBAAmB,EAAE,CAAC;AAAC,eAAK,OAAN;AAAe,eAAK;AAApB,SAAD,CAHX;AAIVC,QAAAA,oBAAoB,EAAE,CAAC;AAAC,kBAAQ,EAAT;AAAa,oBAAU,CAAC;AAAC,mBAAO;AAAR,WAAD;AAAvB,SAAD,CAJZ;AAKVC,QAAAA,sBAAsB,EAAE,CAAC;AAAC,eAAK,CAAN;AAAS,eAAK;AAAd,SAAD,CALd;AAMVC,QAAAA,eAAe,EAAE,CAAC;AAAC,eAAK,CAAN;AAAS,eAAK;AAAd,SAAD,CANP;AAOVC,QAAAA,mBAAmB,EAAE,CAPX;AAQVC,QAAAA,cAAc,EAAE,CAAC;AAAC,eAAK,CAAN;AAAS,eAAK;AAAd,SAAD,CARN;AASVC,QAAAA,kBAAkB,EAAE,CAAC;AAAC,eAAK,CAAN;AAAS,eAAK;AAAd,SAAD,CATV;AAUVC,QAAAA,cAAc,EAAE,CAAC;AAAC,mBAAS,GAAV;AAAc,mBAAS,GAAvB;AAA4B,sBAAY;AAAxC,SAAD;AAVN;AAJL,KAAb;AAiBH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,YAAL;AACH;;AACDA,EAAAA,YAAY,GAAG;AACXpB,IAAAA,CAAC,CAACqB,IAAF,CAAO;AACHC,MAAAA,GAAG,EAAE,gBADF;AAEHC,MAAAA,IAAI,EAAE;AACN,yBAAiB,KAAKjB,KAAL,CAAWD;AADtB,OAFH;AAKHmB,MAAAA,OAAO,EAAGD,IAAD,IAAU;AACf,aAAKE,QAAL,CAAc;AACVrB,UAAAA,YAAY,EAAEmB,IAAI,CAACnB;AADT,SAAd,EAEG,MAAM;AACL,eAAKsB,aAAL;AACH,SAJD;AAKH;AAXE,KAAP;AAaH;;AACDA,EAAAA,aAAa,GAAG;AACZ1B,IAAAA,CAAC,CAACqB,IAAF,CAAO;AACHC,MAAAA,GAAG,EAAE,kFADF;AAEHK,MAAAA,IAAI,EAAE,KAFH;AAGHC,MAAAA,UAAU,EAAGC,GAAD,IAAS;AACjBA,QAAAA,GAAG,CAACC,gBAAJ,CAAqB,eAArB,EAAsC,YAAY,KAAKxB,KAAL,CAAWF,YAA7D;AACH,OALE;AAMHoB,MAAAA,OAAO,EAAGD,IAAD,IAAU;AACf,cAAMf,YAAY,GAAG,KAAKuB,KAAL,CAAWC,eAAX,CAA2BT,IAA3B,CAArB;AACA,aAAKE,QAAL,CAAc;AAACjB,UAAAA;AAAD,SAAd;AACH,OATE;AAUHyB,MAAAA,KAAK,EAAE,CAACC,cAAD,EAAiBC,UAAjB,EAA6BC,WAA7B,KAA6C;AAChDC,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAaH,UAAzB;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAYF,WAAxB;AACH;AAbE,KAAP;AAeH;;AACDG,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEI,oBAAC,iBAAD;AACI,MAAA,KAAK,EAAC,IADV;AAEI,MAAA,mBAAmB,EAAE,KAAKjC,KAAL,CAAWE,YAAX,CAAwBO,mBAFjD;AAGI,MAAA,oBAAoB,EAAE,KAAKT,KAAL,CAAWE,YAAX,CAAwBI,oBAHlD;AAII,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWE,YAAX,CAAwBU,cAJnC;AAKI,MAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWE,YAAX,CAAwBG,mBALnC;AAMI,MAAA,MAAM,EAAE,KAAKL,KAAL,CAAWE,YAAX,CAAwBE,aANpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAaH;;AAzEyC;;AA4E9C,eAAeR,qBAAf","sourcesContent":["import './graph_styling.css';\nimport React, { Component } from 'react';\nimport * as $ from \"jquery\";\nimport Chart_Constructor from './chart_constructor';\nclass Personal_Spotify_Data extends Component {\n    constructor() {\n        super();\n        const access_token ='BQD7brPt2c3ENXb-WkF0X1a0IlM7HeFUrIRiay7TPRAd-2ekyVjltCLNLJTiS_eU6RBYFhCxZWq7qRwVMPWWLwYu-fEbE1A9HQeqzzqwQUHbFGG_OU3iF2Gkrt8B6jLb-mYIxtCKlKjXLD5DlRnQyVDSvIZ9L83VMm30TuZcDeU'\n        const refresh_token = 'AQAoiRmHjuYjbQz51gEUXjL98e_PlSwPcGonvYfxS6oOs7tHhakvYvWhohZNwrNMx1k4OnIdyeKBg77UL9w9xpmQC0MpAZ92uHpzobO0pFNaADhU9eKHzeg8OtmNatvoY84';\n        // https://developer.spotify.com/documentation/general/guides/authorization-guide/\n        this.state = {\n            access_token: access_token,\n            refresh_token: refresh_token,\n            loggedIn: access_token ? true : false,\n            spotify_data: {\n                top_artists: [{'x': 0, 'y': 0}],\n                genre_weights: [{'x': 0, 'y': 'Undef'}],\n                top_5_artists_graph: [{'x': 'Undef', 'y': 0,}],\n                top_5_artists_images: [{'name': '', 'images': [{'url': ''}]}],\n                top_artists_popularity: [{'x': 0, 'y': 0}],\n                popularity_list: [{'x': 0, 'y': 0}], \n                average_artist_rank: 0, \n                genre_quantity: [{'x': 0, 'y': 0}], \n                genre_intersection: [{'x': 0, 'y': 0}],\n                radialRankings: [{'angle': 360,'label': 'f', 'subLabel': 'f'}], \n            }\n        }\n    }\n    componentDidMount() {\n        this.refreshToken();\n    }\n    refreshToken() {\n        $.ajax({\n            url: '/refresh_token',\n            data: {\n            'refresh_token': this.state.refresh_token \n            },\n            success: (data) => {\n                this.setState({\n                    access_token: data.access_token\n                }, () => {\n                    this.getTopArtists();\n                });\n            }\n        });\n    }\n    getTopArtists() {\n        $.ajax({\n            url: 'https://api.spotify.com/v1/me/top/artists?time_range=long_term&limit=50&offset=0',\n            type: \"GET\",\n            beforeSend: (xhr) => {\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.state.access_token);\n            },\n            success: (data) => {\n                const spotify_data = this.props.analyseTermData(data);\n                this.setState({spotify_data});\n            },\n            error: (XMLHttpRequest, textStatus, errorThrown) => { \n                console.log(\"Status: \" + textStatus); \n                console.log(\"Error: \" + errorThrown); \n            },\n        });\n    }\n    render() {\n        return (\n            <div>\n                <h2>I Like:</h2>\n                <Chart_Constructor\n                    owner='me'\n                    average_artist_rank={this.state.spotify_data.average_artist_rank}\n                    top_5_artists_images={this.state.spotify_data.top_5_artists_images}\n                    data1={this.state.spotify_data.radialRankings} \n                    data2={this.state.spotify_data.top_5_artists_graph}\n                    genres={this.state.spotify_data.genre_weights}\n                />\n            </div>\n        ); \n    }\n}\n\nexport default Personal_Spotify_Data;"]},"metadata":{},"sourceType":"module"}