{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_previewer/spotify_previewer.js\";\nimport React, { Component } from 'react';\nimport Spotify from 'spotify-web-api-js';\nimport * as $ from \"jquery\";\nimport Chart_Constructor from './chart_constructor'; // https://medium.com/@jonnykalambay/now-playing-using-spotifys-awesome-api-with-react-7db8173a7b13?\n\nconst spotifyWebApi = new Spotify();\n\nclass Spotify_Previewer extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const top_artists_popularity = [{\n      x: 0,\n      y: 8\n    }, {\n      x: 1,\n      y: 5\n    }, {\n      x: 2,\n      y: 4\n    }, {\n      x: 3,\n      y: 9\n    }, {\n      x: 4,\n      y: 1\n    }, {\n      x: 5,\n      y: 7\n    }, {\n      x: 6,\n      y: 6\n    }, {\n      x: 7,\n      y: 3\n    }, {\n      x: 8,\n      y: 2\n    }, {\n      x: 9,\n      y: 0\n    }];\n    this.state = {\n      formattedResult: {\n        top_artists_popularity\n      },\n      access_token: '',\n      loggedIn: params.access_token ? true : false,\n      nowPlaying: {\n        name: 'Not Checked',\n        image: ''\n      },\n      short_term: {\n        top_artists_popularity\n      },\n      medium_term: {\n        top_artists_popularity\n      },\n      long_term: {\n        top_artists_popularity\n      }\n    };\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n      this.setState({\n        access_token: params.access_token\n      });\n    }\n  }\n\n  piChartRankings(ranks) {\n    let keys = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n    var values = [];\n    keys.forEach(e => {\n      var count = 0;\n      ranks.forEach(element => {\n        if (e === Math.trunc((element - 0.5) / 10) * 10) {\n          count++;\n        }\n      });\n      values.push(count);\n    }); // let finalResult = values.reduce((accumulator, currentValue) => {\n    //     if(currentValue===0){\n    //     }\n    //     return accumulator.concat({'angle': currentValue, 'label': values.indexOf(currentValue)})\n    // }, []);\n\n    var formattedResult = [];\n\n    for (var i = 0; i <= values.length - 1; i++) {\n      if (values[i] !== 0) {\n        formattedResult.push({\n          'angle': values[i],\n          'label': 10 * i,\n          'radius': i / 2 + 5\n        });\n      }\n    }\n\n    console.log('formatted pi Chart Data', formattedResult);\n    this.setState({\n      formattedResult\n    });\n  }\n\n  analyseTermData(data, term) {\n    const test_array = [\"pop\", \"rap\", \"ssdsdsd\"];\n    const items = data.items;\n    let top_artists = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.name), []); // let top_artists_popularity = items.reduce((accumulator, currentValue) => accumulator.concat({'artist': currentValue.name, 'rank': currentValue.popularity}), []);\n\n    let top_artists_popularity = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.popularity), []);\n    let average_artist_rank = items.reduce((accumulator, currentValue) => accumulator + currentValue.popularity, 0) / 50;\n    let genre_quantity = items.reduce((accumulator, currentValue) => accumulator.concat([currentValue.genres]), []).flat();\n    const genre_intersection = test_array.filter(element => genre_quantity.includes(element));\n\n    if (term === 'short_term') {\n      this.setState({\n        short_term: {\n          top_artists,\n          top_artists_popularity,\n          average_artist_rank,\n          genre_quantity,\n          genre_intersection\n        }\n      });\n    } else if (term === 'medium_term') {\n      this.setState({\n        medium_term: {\n          top_artists,\n          top_artists_popularity,\n          average_artist_rank,\n          genre_quantity,\n          genre_intersection\n        }\n      });\n    } else {\n      this.setState({\n        long_term: {\n          top_artists,\n          top_artists_popularity,\n          average_artist_rank,\n          genre_quantity,\n          genre_intersection\n        }\n      });\n      console.log(this.state.short_term.top_artists_popularity);\n      console.log(this.state.medium_term.average_artist_rank);\n      console.log(this.state.long_term.genre_quantity);\n      this.piChartRankings(top_artists_popularity);\n    }\n  } // getNowPlaying() {\n  //     spotifyWebApi.getMyCurrentPlaybackState ()\n  //     .then((response) => {\n  //         this.setState({\n  //             name: response.item.name,\n  //             image: response.item.album.images[0].url\n  //         })\n  //         console.log(this.state.name);\n  //     }) \n  // }\n\n\n  getTopArtists() {\n    ['short_term', 'medium_term', 'long_term'].map(e => {\n      $.ajax({\n        url: \"https://api.spotify.com/v1/me/top/artists?time_range=\".concat(e, \"&limit=50&offset=0\"),\n        type: \"GET\",\n        beforeSend: xhr => {\n          xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.getHashParams().access_token);\n        },\n        success: data => {\n          this.analyseTermData(data, e);\n        }\n      });\n    });\n  }\n\n  componentWillMount() {\n    if (this.state.loggedIn) {\n      this.getTopArtists();\n    } // this.forceUpdate();\n\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"How Similar Are Our Music Tastes?\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"This is super important in order to ensure..\"), !this.state.loggedIn ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"http://localhost:5000/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"'Do Something with Spotify'\"))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, this.state.name), React.createElement(\"img\", {\n      src: this.state.image,\n      alt: \"Album Image\",\n      height: \"auto\",\n      width: \"auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(Chart_Constructor, {\n      data: this.state.formattedResult,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Spotify_Previewer;","map":{"version":3,"sources":["/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_previewer/spotify_previewer.js"],"names":["React","Component","Spotify","$","Chart_Constructor","spotifyWebApi","Spotify_Previewer","constructor","params","getHashParams","top_artists_popularity","x","y","state","formattedResult","access_token","loggedIn","nowPlaying","name","image","short_term","medium_term","long_term","setAccessToken","setState","piChartRankings","ranks","keys","values","forEach","e","count","element","Math","trunc","push","i","length","console","log","analyseTermData","data","term","test_array","items","top_artists","reduce","accumulator","currentValue","concat","popularity","average_artist_rank","genre_quantity","genres","flat","genre_intersection","filter","includes","getTopArtists","map","ajax","url","type","beforeSend","xhr","setRequestHeader","success","componentWillMount","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Spotify from 'spotify-web-api-js';\nimport * as $ from \"jquery\";\nimport Chart_Constructor from './chart_constructor';\n// https://medium.com/@jonnykalambay/now-playing-using-spotifys-awesome-api-with-react-7db8173a7b13?\n\nconst spotifyWebApi = new Spotify();\n\nclass Spotify_Previewer extends Component {\n    constructor(){\n        super();\n        const params = this.getHashParams()\n        const top_artists_popularity = [\n            {x: 0, y: 8},\n            {x: 1, y: 5},\n            {x: 2, y: 4},\n            {x: 3, y: 9},\n            {x: 4, y: 1},\n            {x: 5, y: 7},\n            {x: 6, y: 6},\n            {x: 7, y: 3},\n            {x: 8, y: 2},\n            {x: 9, y: 0}\n        ];\n        this.state = {\n            formattedResult: {top_artists_popularity},\n            access_token: '',\n            loggedIn: params.access_token ? true : false,\n            nowPlaying: {\n                name: 'Not Checked',\n                image: ''\n            },\n            short_term: {top_artists_popularity},\n            medium_term: {top_artists_popularity},\n            long_term: {top_artists_popularity},\n        }\n        if (params.access_token) {\n            spotifyWebApi.setAccessToken(params.access_token);\n            this.setState(({\n                access_token: params.access_token\n            }));\n        }\n    }\n    piChartRankings(ranks) {\n        let keys = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n        var values =[]\n        keys.forEach(e => {\n            var count = 0;\n            ranks.forEach(element => {\n                if(e === (Math.trunc((element-0.5)/10))*10) {\n                    count ++;\n                }\n            })\n            values.push(count)\n        })\n        // let finalResult = values.reduce((accumulator, currentValue) => {\n        //     if(currentValue===0){\n\n        //     }\n        //     return accumulator.concat({'angle': currentValue, 'label': values.indexOf(currentValue)})\n        // }, []);\n        var formattedResult = [];\n        for (var i = 0; i <= values.length -1; i++) {\n            if(values[i] !== 0) {\n                formattedResult.push({'angle': values[i], 'label': 10*i, 'radius': i/2+5 })\n            }\n        }\n        \n        console.log('formatted pi Chart Data',formattedResult)\n        this.setState({\n            formattedResult\n        })\n    }\n    analyseTermData(data, term) {\n        const test_array = [\"pop\", \"rap\", \"ssdsdsd\"];\n        const items = data.items;\n        let top_artists = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.name), []);\n        // let top_artists_popularity = items.reduce((accumulator, currentValue) => accumulator.concat({'artist': currentValue.name, 'rank': currentValue.popularity}), []);\n        let top_artists_popularity = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.popularity), []);\n        let average_artist_rank = items.reduce((accumulator, currentValue) => accumulator + currentValue.popularity, 0)/50;\n        let genre_quantity = items.reduce((accumulator, currentValue) => accumulator.concat([currentValue.genres]), []).flat(); \n        const genre_intersection = test_array.filter(element => genre_quantity.includes(element));\n        if(term === 'short_term'){\n            this.setState({ short_term: {top_artists,\n                 top_artists_popularity, \n                 average_artist_rank, genre_quantity, genre_intersection,}});\n        } else if(term === 'medium_term'){\n            this.setState({ medium_term: {top_artists, \n                top_artists_popularity,\n                 average_artist_rank, genre_quantity, genre_intersection,}});\n        } else {\n            this.setState({ long_term: {top_artists, \n                top_artists_popularity, \n                average_artist_rank, genre_quantity, genre_intersection,}});\n            console.log(this.state.short_term.top_artists_popularity)\n            console.log(this.state.medium_term.average_artist_rank);\n            console.log(this.state.long_term.genre_quantity);\n            this.piChartRankings(top_artists_popularity)\n        }        \n    }\n    // getNowPlaying() {\n    //     spotifyWebApi.getMyCurrentPlaybackState ()\n    //     .then((response) => {\n    //         this.setState({\n    //             name: response.item.name,\n    //             image: response.item.album.images[0].url\n    //         })\n    //         console.log(this.state.name);\n    //     }) \n    // }\n    getTopArtists() {\n        ['short_term', 'medium_term', 'long_term'].map(e => {\n            $.ajax({\n                url: `https://api.spotify.com/v1/me/top/artists?time_range=${e}&limit=50&offset=0`,\n                type: \"GET\",\n                beforeSend: (xhr) => {\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.getHashParams().access_token);\n                },\n                success: (data) => {\n                this.analyseTermData(data, e);\n                }\n            });\n        });\n        \n    }\n    componentWillMount(){\n        if(this.state.loggedIn) {\n            this.getTopArtists();\n        }\n        // this.forceUpdate();\n        \n    }\n   \n    getHashParams() {\n        var hashParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n            q = window.location.hash.substring(1);\n        while ( e = r.exec(q)) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n        }\n        return hashParams;\n    }\n\n    render() {\n            return (\n                <div>\n                    <h1>How Similar Are Our Music Tastes?</h1>\n                    <h3>This is super important in order to ensure..</h3>\n                {!this.state.loggedIn ? (\n                <div>\n                    <a href='http://localhost:5000/login'>\n                        <button>'Do Something with Spotify'</button>\n                    </a>\n                </div>\n                ) : (\n                <div>\n                    <h3>{this.state.name}</h3>\n                    <img src={this.state.image} alt='Album Image' height='auto' width='auto'/>\n                    <Chart_Constructor data={this.state.formattedResult}/>\n                </div>\n                )\n                } \n                \n                \n                </div>\n            );\n    }\n}\n\nexport default Spotify_Previewer;"]},"metadata":{},"sourceType":"module"}