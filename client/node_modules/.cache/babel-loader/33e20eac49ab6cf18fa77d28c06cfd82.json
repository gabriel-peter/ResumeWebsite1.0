{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_comparer/client_spotify_data.js\";\nimport './graph_styling.css';\nimport React, { Component } from 'react';\nimport * as $ from \"jquery\";\nimport Chart_Constructor from './chart_constructor';\nimport Personal_Spotify_Data from './personal_spotify_data'; // https://medium.com/@jonnykalambay/now-playing-using-spotifys-awesome-api-with-react-7db8173a7b13?\n\nclass Spotify_Previewer extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const default_data = [{\n      'x': 4,\n      'y': 2\n    }];\n\n    if (window.performance) {\n      if (performance.navigation.type == 1) {\n        window.location.replace('http://localhost:5000/login');\n      }\n    }\n\n    this.state = {\n      access_token: '',\n      loggedIn: params.access_token ? true : false,\n      spotify_data: {\n        top_artists: default_data,\n        genre_weights: [{\n          'x': 1,\n          'y': 'rap'\n        }],\n        top_5_artists_graph: [{\n          'x': 'A',\n          'y': 2\n        }],\n        top_5_artists_images: [{\n          'name': '',\n          'images': [{\n            'url': ''\n          }]\n        }],\n        top_artists_popularity: default_data,\n        popularity_list: default_data,\n        average_artist_rank: 0,\n        genre_quantity: default_data,\n        genre_intersection: default_data,\n        radialRankings: [{\n          'angle': 360\n        }]\n      }\n    }; // if (params.access_token) {\n    //     this.setState(({\n    //         access_token: params.access_token\n    //     }));\n    // }\n\n    console.log(params.access_token);\n  } // foo(){\n  //     return 'hello'\n  // }\n  // genreWeighting (genres) {\n  //     var categories = ['Pop', 'Rap', 'Country', 'Rock', 'Metal', 'Alternative', 'R&b', 'House'];\n  //     const weights = [];\n  //     categories.forEach(e => {\n  //         var count = 0;\n  //         genres.forEach(x => {\n  //             if(x.includes(e.toLowerCase())) {\n  //                 count ++;\n  //             }\n  //         });\n  //         if(count>0) {\n  //             weights.push({'y': e, 'x': (count/genres.length)*100}); // percent ration of total\n  //         }\n  //     });\n  //     return weights;\n  // }\n  // piChartRankings(ranks) {\n  //     let keys = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n  //     var values =[]\n  //     keys.forEach(e => {\n  //         var count = 0;\n  //         ranks.forEach(element => {\n  //             if(e === (Math.trunc((element-0.5)/10))*10) {\n  //                 count ++;\n  //             }\n  //         })\n  //         values.push(count)\n  //     })\n  //     // Radial Chart \n  //     var formattedResult = [];\n  //     for (var i = 0; i <= values.length -1; i++) {\n  //         if(values[i] !== 0) {\n  //             formattedResult.push({'angle': values[i],'subLabel': values[i] + '%', 'label': 10*i, 'radius': i/2+5 })\n  //         }\n  //     }\n  //     return formattedResult;\n  // }\n  // analyseTermData(data) {\n  //     const test_array = [\"pop\", \"rap\", \"ssdsdsd\"];\n  //     const items = data.items;\n  //     const top_artists_names = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.name), []);\n  //     const top_artists_popularity = items.reduce((accumulator, currentValue) => accumulator.concat({'artist': currentValue.name, 'rank': currentValue.popularity}), []);\n  //     const popularity_list = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.popularity), []);\n  //     const average_artist_rank = items.reduce((accumulator, currentValue) => accumulator + currentValue.popularity, 0)/50;\n  //     const genre_quantity = items.reduce((accumulator, currentValue) => accumulator.concat([currentValue.genres]), []).flat(); \n  //     const genre_intersection = test_array.filter(element => genre_quantity.includes(element));\n  //     const radialRankings = this.piChartRankings(popularity_list)\n  //     const top_5_artists_graph = (items.slice(0,5)).reduce((accumulator, currentValue) => accumulator.concat({'x': currentValue.name, 'y': currentValue.popularity}), []);\n  //     const top_5_artists_images = items.slice(0,5);\n  //     const genre_weights = this.genreWeighting(genre_quantity);\n  //     console.log(genre_weights)\n  //     this.setState( { \n  //         top_artists_names,\n  //         top_5_artists_graph,\n  //         top_5_artists_images,\n  //         genre_weights,\n  //         top_artists_popularity,\n  //         popularity_list, \n  //         average_artist_rank, \n  //         genre_quantity, \n  //         genre_intersection,\n  //         radialRankings \n  //     });     \n  // }\n\n\n  getTopArtists(token) {\n    $.ajax({\n      url: 'https://api.spotify.com/v1/me/top/artists?time_range=long_term&limit=50&offset=0',\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        // this.analyseTermData(data)\n        const spotify_data = this.props.analyseTermData(data);\n        this.setState({\n          spotify_data\n        });\n        console.log('From Client as state', this.state.spotify_data);\n      }\n    });\n  }\n\n  componentDidMount() {\n    if (this.state.loggedIn) {\n      this.getTopArtists(this.getHashParams().access_token);\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"spotify-components\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"How Similar Are Our Music Tastes?\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"This is super important...\"), !this.state.loggedIn ? React.createElement(\"div\", {\n      className: \"spotify-button-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"spotify-button-aref\",\n      href: \"http://localhost:5000/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"/images/spotify_button_image.png\",\n      height: 50,\n      width: 150,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"spotify-button-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, 'Connect & Compare'))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"You Like:\"), React.createElement(Chart_Constructor, {\n      average_artist_rank: this.state.spotify_data.average_artist_rank,\n      top_5_artists_images: this.state.spotify_data.top_5_artists_images,\n      data1: this.state.spotify_data.radialRankings,\n      data2: this.state.spotify_data.top_5_artists_graph,\n      genres: this.state.spotify_data.genre_weights,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })), React.createElement(Personal_Spotify_Data, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }));\n  } // render() {\n  //         return (\n  //             <div className='spotify-components'>\n  //                 <h1>How Similar Are Our Music Tastes?</h1>\n  //                 <h3>This is super important...</h3>\n  //             {!this.state.loggedIn ? (\n  //             <div className='spotify-button-div'>\n  //                 <a className='spotify-button-aref' href='http://localhost:5000/login'>\n  //                     <img src='/images/spotify_button_image.png' height={50} width={150}/>\n  //                     <p className='spotify-button-text'>{'Connect & Compare'}</p>\n  //                 </a>\n  //             </div>\n  //             ) : (\n  //             <div>\n  //                 <h2>You Like:</h2>\n  //                 <Chart_Constructor\n  //                     average_artist_rank={this.state.average_artist_rank}\n  //                     top_5_artists_images={this.state.top_5_artists_images}\n  //                     data1={this.state.radialRankings} \n  //                     data2={this.state.top_5_artists_graph}\n  //                     genres={this.state.genre_weights}\n  //                     foo={this.foo}\n  //                 />\n  //             </div>\n  //             )\n  //             } \n  //             <Personal_Spotify_Data/>\n  //             </div>\n  //         );\n  // }\n\n\n}\n\nexport default Spotify_Previewer;","map":{"version":3,"sources":["/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_comparer/client_spotify_data.js"],"names":["React","Component","$","Chart_Constructor","Personal_Spotify_Data","Spotify_Previewer","constructor","params","getHashParams","default_data","window","performance","navigation","type","location","replace","state","access_token","loggedIn","spotify_data","top_artists","genre_weights","top_5_artists_graph","top_5_artists_images","top_artists_popularity","popularity_list","average_artist_rank","genre_quantity","genre_intersection","radialRankings","console","log","getTopArtists","token","ajax","url","beforeSend","xhr","setRequestHeader","success","data","props","analyseTermData","setState","componentDidMount","hashParams","e","r","q","hash","substring","exec","decodeURIComponent","render"],"mappings":"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","sourcesContent":["import './graph_styling.css';\nimport React, { Component } from 'react';\nimport * as $ from \"jquery\";\nimport Chart_Constructor from './chart_constructor';\nimport Personal_Spotify_Data from './personal_spotify_data';\n// https://medium.com/@jonnykalambay/now-playing-using-spotifys-awesome-api-with-react-7db8173a7b13?\n\nclass Spotify_Previewer extends Component {\n    constructor(){\n        super();\n        const params = this.getHashParams()\n        const default_data = [{'x': 4, 'y': 2}];\n        if (window.performance) {\n            if (performance.navigation.type == 1) {\n                window.location.replace('http://localhost:5000/login');\n            }\n          }\n        this.state = {\n            access_token: '',\n            loggedIn: params.access_token ? true : false,\n            spotify_data: {\n                top_artists: default_data,\n                genre_weights: [{'x': 1, 'y': 'rap'}],\n                top_5_artists_graph: [{'x': 'A', 'y': 2}],\n                top_5_artists_images: [{'name': '', 'images': [{'url': ''}]}],\n                top_artists_popularity: default_data,\n                popularity_list: default_data, \n                average_artist_rank: 0, \n                genre_quantity: default_data, \n                genre_intersection: default_data,\n                radialRankings: [{'angle': 360}], \n            }\n        }\n        // if (params.access_token) {\n        //     this.setState(({\n        //         access_token: params.access_token\n        //     }));\n        // }\n        console.log(params.access_token);\n    }\n    // foo(){\n    //     return 'hello'\n    // }\n    // genreWeighting (genres) {\n    //     var categories = ['Pop', 'Rap', 'Country', 'Rock', 'Metal', 'Alternative', 'R&b', 'House'];\n    //     const weights = [];\n    //     categories.forEach(e => {\n    //         var count = 0;\n    //         genres.forEach(x => {\n    //             if(x.includes(e.toLowerCase())) {\n    //                 count ++;\n    //             }\n    //         });\n    //         if(count>0) {\n    //             weights.push({'y': e, 'x': (count/genres.length)*100}); // percent ration of total\n    //         }\n    //     });\n    //     return weights;\n    // }\n    // piChartRankings(ranks) {\n    //     let keys = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n    //     var values =[]\n    //     keys.forEach(e => {\n    //         var count = 0;\n    //         ranks.forEach(element => {\n    //             if(e === (Math.trunc((element-0.5)/10))*10) {\n    //                 count ++;\n    //             }\n    //         })\n    //         values.push(count)\n    //     })\n    //     // Radial Chart \n    //     var formattedResult = [];\n    //     for (var i = 0; i <= values.length -1; i++) {\n    //         if(values[i] !== 0) {\n    //             formattedResult.push({'angle': values[i],'subLabel': values[i] + '%', 'label': 10*i, 'radius': i/2+5 })\n    //         }\n    //     }\n    //     return formattedResult;\n    // }\n    // analyseTermData(data) {\n    //     const test_array = [\"pop\", \"rap\", \"ssdsdsd\"];\n    //     const items = data.items;\n    //     const top_artists_names = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.name), []);\n    //     const top_artists_popularity = items.reduce((accumulator, currentValue) => accumulator.concat({'artist': currentValue.name, 'rank': currentValue.popularity}), []);\n    //     const popularity_list = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.popularity), []);\n    //     const average_artist_rank = items.reduce((accumulator, currentValue) => accumulator + currentValue.popularity, 0)/50;\n    //     const genre_quantity = items.reduce((accumulator, currentValue) => accumulator.concat([currentValue.genres]), []).flat(); \n    //     const genre_intersection = test_array.filter(element => genre_quantity.includes(element));\n    //     const radialRankings = this.piChartRankings(popularity_list)\n    //     const top_5_artists_graph = (items.slice(0,5)).reduce((accumulator, currentValue) => accumulator.concat({'x': currentValue.name, 'y': currentValue.popularity}), []);\n    //     const top_5_artists_images = items.slice(0,5);\n    //     const genre_weights = this.genreWeighting(genre_quantity);\n    //     console.log(genre_weights)\n    //     this.setState( { \n    //         top_artists_names,\n    //         top_5_artists_graph,\n    //         top_5_artists_images,\n    //         genre_weights,\n    //         top_artists_popularity,\n    //         popularity_list, \n    //         average_artist_rank, \n    //         genre_quantity, \n    //         genre_intersection,\n    //         radialRankings \n    //     });     \n    // }\n    getTopArtists(token) {\n            $.ajax({\n                url: 'https://api.spotify.com/v1/me/top/artists?time_range=long_term&limit=50&offset=0',\n                type: \"GET\",\n                beforeSend: (xhr) => {\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n                },\n                success: (data) => {\n                    // this.analyseTermData(data)\n                           const spotify_data = this.props.analyseTermData(data);\n                        this.setState({spotify_data});\n                        console.log('From Client as state', this.state.spotify_data)\n                }\n            });\n    }\n    componentDidMount(){\n        if(this.state.loggedIn) {\n            this.getTopArtists(this.getHashParams().access_token);\n        } \n    }\n    getHashParams() {\n        var hashParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n            q = window.location.hash.substring(1);\n        while ( e = r.exec(q)) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n        }\n        return hashParams;\n    }\n    render() {\n        return (\n            <div className='spotify-components'>\n                <h1>How Similar Are Our Music Tastes?</h1>\n                <h3>This is super important...</h3>\n            {!this.state.loggedIn ? (\n                \n            <div className='spotify-button-div'>\n                <a className='spotify-button-aref' href='http://localhost:5000/login'>\n                    <img src='/images/spotify_button_image.png' height={50} width={150}/>\n                    <p className='spotify-button-text'>{'Connect & Compare'}</p>\n                </a>\n            </div>\n            ) : (\n            <div>\n                <h2>You Like:</h2>\n                <Chart_Constructor\n                    average_artist_rank={this.state.spotify_data.average_artist_rank}\n                    top_5_artists_images={this.state.spotify_data.top_5_artists_images}\n                    data1={this.state.spotify_data.radialRankings} \n                    data2={this.state.spotify_data.top_5_artists_graph}\n                    genres={this.state.spotify_data.genre_weights}\n                />\n            </div>\n            )\n            } \n            <Personal_Spotify_Data/>\n            </div>\n        );\n}\n    // render() {\n    //         return (\n    //             <div className='spotify-components'>\n    //                 <h1>How Similar Are Our Music Tastes?</h1>\n    //                 <h3>This is super important...</h3>\n    //             {!this.state.loggedIn ? (\n                    \n    //             <div className='spotify-button-div'>\n    //                 <a className='spotify-button-aref' href='http://localhost:5000/login'>\n    //                     <img src='/images/spotify_button_image.png' height={50} width={150}/>\n    //                     <p className='spotify-button-text'>{'Connect & Compare'}</p>\n    //                 </a>\n    //             </div>\n    //             ) : (\n    //             <div>\n    //                 <h2>You Like:</h2>\n    //                 <Chart_Constructor\n    //                     average_artist_rank={this.state.average_artist_rank}\n    //                     top_5_artists_images={this.state.top_5_artists_images}\n    //                     data1={this.state.radialRankings} \n    //                     data2={this.state.top_5_artists_graph}\n    //                     genres={this.state.genre_weights}\n    //                     foo={this.foo}\n    //                 />\n    //             </div>\n    //             )\n    //             } \n    //             <Personal_Spotify_Data/>\n    //             </div>\n    //         );\n    // }\n}\n\nexport default Spotify_Previewer;"]},"metadata":{},"sourceType":"module"}