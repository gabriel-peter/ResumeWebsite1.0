{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_comparer/spotify.js\";\nimport './graph_styling.css';\nimport React, { Component } from 'react';\nimport * as $ from \"jquery\";\nimport Client_Spotify_Data from './client_spotify_data';\nimport Personal_Spotify_Data from './personal_spotify_data';\n\nclass Spotify extends Component {\n  constructor() {\n    // const access_token ='BQD7brPt2c3ENXb-WkF0X1a0IlM7HeFUrIRiay7TPRAd-2ekyVjltCLNLJTiS_eU6RBYFhCxZWq7qRwVMPWWLwYu-fEbE1A9HQeqzzqwQUHbFGG_OU3iF2Gkrt8B6jLb-mYIxtCKlKjXLD5DlRnQyVDSvIZ9L83VMm30TuZcDeU'\n    super();\n    this.state = {\n      loggedIn: false\n    }; // this.getTopArtists(access_token)\n  }\n\n  toggleLogin() {\n    this.setState(state => ({\n      loggedIn: !state.loggedIn\n    }));\n  }\n\n  genreWeighting(genres) {\n    var categories = ['Pop', 'Rap', 'Country', 'Rock', 'Metal', 'Alternative', 'R&b', 'House'];\n    const weights = [];\n    categories.forEach(e => {\n      var count = 0;\n      genres.forEach(x => {\n        if (x.includes(e.toLowerCase())) {\n          count++;\n        }\n      });\n\n      if (count > 0) {\n        weights.push({\n          'y': e,\n          'x': count / genres.length * 100\n        }); // percent ration of total\n      }\n    });\n    return weights;\n  }\n\n  piChartRankings(ranks) {\n    let keys = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n    var values = [];\n    keys.forEach(e => {\n      var count = 0;\n      ranks.forEach(element => {\n        if (e === Math.trunc((element - 0.5) / 10) * 10) {\n          count++;\n        }\n      });\n      values.push(count);\n    }); // Radial Chart \n\n    var formattedResult = [];\n\n    for (var i = 0; i <= values.length - 1; i++) {\n      if (values[i] !== 0) {\n        formattedResult.push({\n          'angle': values[i],\n          'subLabel': values[i] + '%',\n          'label': 10 * i,\n          'radius': i / 2 + 5\n        });\n      }\n    }\n\n    return formattedResult;\n  }\n\n  analyseTermData(data) {\n    const test_array = [\"pop\", \"rap\", \"ssdsdsd\"];\n    const items = data.items;\n    const top_artists_names = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.name), []);\n    const top_artists_popularity = items.reduce((accumulator, currentValue) => accumulator.concat({\n      'artist': currentValue.name,\n      'rank': currentValue.popularity\n    }), []);\n    const popularity_list = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.popularity), []);\n    const average_artist_rank = items.reduce((accumulator, currentValue) => accumulator + currentValue.popularity, 0) / 50;\n    const genre_quantity = items.reduce((accumulator, currentValue) => accumulator.concat([currentValue.genres]), []).flat();\n    const genre_intersection = test_array.filter(element => genre_quantity.includes(element));\n    const radialRankings = this.piChartRankings(popularity_list);\n    const top_5_artists_graph = items.slice(0, 5).reduce((accumulator, currentValue) => accumulator.concat({\n      'x': currentValue.name,\n      'y': currentValue.popularity\n    }), []);\n    const top_5_artists_images = items.slice(0, 5);\n    const genre_weights = this.genreWeighting(genre_quantity);\n    const spotify_data = {\n      top_artists_names,\n      top_5_artists_graph,\n      top_5_artists_images,\n      genre_weights,\n      top_artists_popularity,\n      popularity_list,\n      average_artist_rank,\n      genre_quantity,\n      genre_intersection,\n      radialRankings\n    };\n    return spotify_data;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, !this.state.loggedIn ? React.createElement(\"div\", {\n      className: \"spotify-button-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"spotify-button-aref\",\n      href: \"http://localhost:5000/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"/images/spotify_button_image.png\",\n      height: 50,\n      width: 150,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"spotify-button-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, 'Connect & Compare'))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Client_Spotify_Data, {\n      analyseTermData: this.analyseTermData,\n      piChartRankings: this.piChartRankings,\n      genreWeighting: this.genreWeighting,\n      toggleLogin: this.loggedIn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(Personal_Spotify_Data, {\n      analyseTermData: this.analyseTermData,\n      piChartRankings: this.piChartRankings,\n      genreWeighting: this.genreWeighting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/gabrielpeter/PersonalWebsite1.0/client/src/components/spotify_comparer/spotify.js"],"names":["React","Component","$","Client_Spotify_Data","Personal_Spotify_Data","Spotify","constructor","state","loggedIn","toggleLogin","setState","genreWeighting","genres","categories","weights","forEach","e","count","x","includes","toLowerCase","push","length","piChartRankings","ranks","keys","values","element","Math","trunc","formattedResult","i","analyseTermData","data","test_array","items","top_artists_names","reduce","accumulator","currentValue","concat","name","top_artists_popularity","popularity","popularity_list","average_artist_rank","genre_quantity","flat","genre_intersection","filter","radialRankings","top_5_artists_graph","slice","top_5_artists_images","genre_weights","spotify_data","render"],"mappings":"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","sourcesContent":["import './graph_styling.css';\nimport React, { Component } from 'react';\nimport * as $ from \"jquery\";\nimport Client_Spotify_Data from './client_spotify_data';\nimport Personal_Spotify_Data from './personal_spotify_data';\nclass Spotify extends Component {\n    constructor() {\n        // const access_token ='BQD7brPt2c3ENXb-WkF0X1a0IlM7HeFUrIRiay7TPRAd-2ekyVjltCLNLJTiS_eU6RBYFhCxZWq7qRwVMPWWLwYu-fEbE1A9HQeqzzqwQUHbFGG_OU3iF2Gkrt8B6jLb-mYIxtCKlKjXLD5DlRnQyVDSvIZ9L83VMm30TuZcDeU'\n        super();\n        this.state = {\n            loggedIn: false,\n        }\n        // this.getTopArtists(access_token)\n    }\n    toggleLogin() {\n        this.setState(state => ({\n            loggedIn: !state.loggedIn,\n        }));\n    }\n    genreWeighting (genres) {\n        var categories = ['Pop', 'Rap', 'Country', 'Rock', 'Metal', 'Alternative', 'R&b', 'House'];\n        const weights = [];\n        categories.forEach(e => {\n            var count = 0;\n            genres.forEach(x => {\n                if(x.includes(e.toLowerCase())) {\n                    count ++;\n                }\n            });\n            if(count>0) {\n                weights.push({'y': e, 'x': (count/genres.length)*100}); // percent ration of total\n            }\n        });\n        return weights;\n    }\n    piChartRankings(ranks) {\n        let keys = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];\n        var values =[]\n        keys.forEach(e => {\n            var count = 0;\n            ranks.forEach(element => {\n                if(e === (Math.trunc((element-0.5)/10))*10) {\n                    count ++;\n                }\n            })\n            values.push(count)\n        })\n        // Radial Chart \n        var formattedResult = [];\n        for (var i = 0; i <= values.length -1; i++) {\n            if(values[i] !== 0) {\n                formattedResult.push({'angle': values[i],'subLabel': values[i] + '%', 'label': 10*i, 'radius': i/2+5 })\n            }\n        }\n        return formattedResult;\n    }\n    analyseTermData(data) {\n        const test_array = [\"pop\", \"rap\", \"ssdsdsd\"];\n        const items = data.items;\n        const top_artists_names = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.name), []);\n        const top_artists_popularity = items.reduce((accumulator, currentValue) => accumulator.concat({'artist': currentValue.name, 'rank': currentValue.popularity}), []);\n        const popularity_list = items.reduce((accumulator, currentValue) => accumulator.concat(currentValue.popularity), []);\n        const average_artist_rank = items.reduce((accumulator, currentValue) => accumulator + currentValue.popularity, 0)/50;\n        const genre_quantity = items.reduce((accumulator, currentValue) => accumulator.concat([currentValue.genres]), []).flat(); \n        const genre_intersection = test_array.filter(element => genre_quantity.includes(element));\n        const radialRankings = this.piChartRankings(popularity_list)\n        const top_5_artists_graph = (items.slice(0,5)).reduce((accumulator, currentValue) => accumulator.concat({'x': currentValue.name, 'y': currentValue.popularity}), []);\n        const top_5_artists_images = items.slice(0,5);\n        const genre_weights = this.genreWeighting(genre_quantity);\n        const spotify_data = {\n            top_artists_names,\n            top_5_artists_graph,\n            top_5_artists_images,\n            genre_weights,\n            top_artists_popularity,\n            popularity_list, \n            average_artist_rank, \n            genre_quantity, \n            genre_intersection,\n            radialRankings,\n        }\n        return spotify_data;\n    }\n    render() {\n        return(\n            <div>\n                {!this.state.loggedIn ? (\n                \n                <div className='spotify-button-div'>\n                    <a className='spotify-button-aref' href='http://localhost:5000/login'>\n                        <img src='/images/spotify_button_image.png' height={50} width={150}/>\n                        <p className='spotify-button-text'>{'Connect & Compare'}</p>\n                    </a>\n                </div>\n                ) : (\n                <div>\n                <Client_Spotify_Data\n                    analyseTermData={this.analyseTermData}\n                    piChartRankings={this.piChartRankings}\n                    genreWeighting={this.genreWeighting}\n                    toggleLogin={this.loggedIn}\n                />\n                <Personal_Spotify_Data\n                    analyseTermData={this.analyseTermData}\n                    piChartRankings={this.piChartRankings}\n                    genreWeighting={this.genreWeighting}\n                />\n                </div>\n                )}\n\n                {/* <Compared_Spotify_Data\n\n                /> */}\n            </div>\n        );\n    }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}